PROCEDURE "osr.edw.integration.ti.ltax.procedure.utils::PR_CONF_GENERATE_EVENT_ID" ( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
--------------------------------------------------------------
	-- Get Events not yet in Event.name
	--------------------------------------------------------------
	T_EVENT_NAMES = SELECT UPPER("EVENT_NAME") "EVENT_NAME", UPPER("EVENT_GROUP") "CATEGORY_NAME" FROM "osr.edw.integration.ti.ltax::app.CustomerEvents" GROUP BY "EVENT_NAME", "EVENT_GROUP"
					MINUS
					SELECT UPPER("EVENT_NAME") "EVENT_NAME", UPPER("CATEGORY_NAME") "CATEGORY_NAME" FROM "osr.edw.integration.ti.ltax::adm.config.event.name";
	--------------------------------------------------------------
	-- Get Event Name/Category In correct Case
	--------------------------------------------------------------
	T_EVENTS = 	SELECT a."EVENT_NAME", a."EVENT_GROUP" "CATEGORY_NAME" 
					FROM "osr.edw.integration.ti.ltax::app.CustomerEvents" a
					INNER JOIN :T_EVENT_NAMES b
					ON UPPER(a."EVENT_NAME") = b."EVENT_NAME" AND UPPER(a."EVENT_GROUP") = b."CATEGORY_NAME"
					WHERE a."EVENT_ID.ID" IS NULL
					GROUP BY a."EVENT_NAME", a."EVENT_GROUP";
	--------------------------------------------------------------
	-- Insert new Events
	--------------------------------------------------------------
	INSERT INTO	"osr.edw.integration.ti.ltax::adm.config.event.name" 
			("ID","EVENT_NAME", "CATEGORY_NAME", "DESCRIPTION", "IS_ENABLED", "TYPE", "CREATED.BY", "CREATED.DATE")
			(SELECT "osr.edw.integration.ti.ltax.sequences::AdminEventId".NEXTVAL,"EVENT_NAME", "CATEGORY_NAME", 'GENERATED' "DESCRIPTION", 1 "IS_ENABLED", 3 "TYPE", SESSION_USER, CURRENT_UTCTIMESTAMP FROM :T_EVENTS);
END