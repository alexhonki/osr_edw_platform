PROCEDURE "osr.edw.integration.ti.ltax.procedure.textanalysis::PR_TEXT_ANALYSIS_EXTRACT" ( ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	AS
BEGIN

	--Input variable declaration
	DECLARE TOKENS_NUMBER 		BIGINT;
	DECLARE LV_EVENT_CATEGORY 	NVARCHAR(200) := 'Free Text Analysis'; 

	
	-- 
	/*-----------------------------------------------------------------------------------------------------------------
		Get tokens from text analysis result table where number of words are 2 or more
	*/-----------------------------------------------------------------------------------------------------------------
	TMP_TOKENS = SELECT TRANS_ID, CUST_ID, TA_TOKEN, NumbOfWords FROM (
					SELECT TRANS_ID,CUST_ID, TA_TOKEN, LENGTH(TA_TOKEN) - LENGTH(REPLACE(TA_TOKEN, ' ', '')) + 1 NumbofWords
					FROM "$TA_osr.edw.integration.ti.ltax::text.cleanText.Index_CleanedText"
					ORDER BY TRANS_ID ASC, NumbOfWords DESC, TA_COUNTER DESC)
				WHERE NumbofWords > 1; 
	
	TMP_EVENTS_FOR_TRANS = SELECT TRANS_ID, CUST_ID, TA_TOKEN, NumbOfWords, T2.EVENT_NAME AS EVENT_NAME from :TMP_TOKENS T1 LEFT OUTER JOIN  "osr.edw.integration.ti.ltax::adm.config.event.name" T2
	ON LOWER(T1.TA_TOKEN) = LOWER(T2.EVENT_NAME) ORDER BY T2.EVENT_NAME;
	
	TMP_TOKENS_WITH_EVENT = SELECT * FROM :TMP_EVENTS_FOR_TRANS WHERE EVENT_NAME != NULL;
	TMP_TOKENS_WITH_NO_EVENT = SELECT * FROM :TMP_EVENTS_FOR_TRANS WHERE TRANS_ID NOT IN (SELECT TRANS_ID FROM :TMP_TOKENS_WITH_EVENT);
	TMP_TRANSACT_WITH_MAX_NO_OF_WORDS = SELECT TRANS_ID,  MAX(NumbofWords) AS NumbofWords FROM :TMP_TOKENS_WITH_NO_EVENT GROUP BY TRANS_ID;
	TMP_TOKENS_WITH_MAX_NO_OF_WORDS = SELECT DISTINCT T1.TRANS_ID, T1.NumbOfWords,  T1.CUST_ID,T1. TA_TOKEN, T1.EVENT_NAME FROM :TMP_TOKENS_WITH_NO_EVENT T1 INNER JOIN :TMP_TRANSACT_WITH_MAX_NO_OF_WORDS T2 ON 
										T1.TRANS_ID = T2.TRANS_ID WHERE T1.NumbofWords = T2.NumbofWords;
	
	/*-----------------------------------------------------------------------------------------------------------------
		Create Events for Tokens for which No events exists :- TMP_TOKENS_WITH_MAX_NO_OF_WORDS
	*/-----------------------------------------------------------------------------------------------------------------
	
	-- Get internal Customer ID generated on base customer	
	LT_COMPLAINTS = SELECT 
						a."CUST_ID" 		"CUST_ID",		-- External Customer ID
						b."OBJECT_ID"       "TRANS_ID",
						TO_TIMESTAMP(b."CREATED_AT", 'YYYYMMDDHH24MISS') AS "INIT_DATE",
						TO_TIMESTAMP(b."CHANGED_AT", 'YYYYMMDDHH24MISS') AS "END_DATE",
						YEAR(TO_TIMESTAMP(b."CREATED_AT", 'YYYYMMDDHH24MISS')) * 100 + MONTH(TO_TIMESTAMP(b."CREATED_AT", 'YYYYMMDDHH24MISS')) AS 	"INIT_TS",
						YEAR(TO_TIMESTAMP(b."CREATED_AT", 'YYYYMMDDHH24MISS')) * 100 + MONTH(TO_TIMESTAMP(b."CREATED_AT", 'YYYYMMDDHH24MISS')) AS "END_TS",
						b."DESCRIPTION"
					FROM "osr.edw.integration.ti.ltax.views::CV_LT_TAXPAYERS" a
					INNER JOIN "osr.edw.staging.td.crm.synonym::CDS_CRM.DSO.CRMDORDERADMH.active_data" b on a."CUST_ID" = b."OBJECT_ID"; -- this will be BPNum;
					-- TO DO - ORDERADMH TABLE TO BE REPLACED BY THE VIEW WHICH WOULD GIVE DESCRIPTION AND BUSINESS PARTNER
		
	INSERT INTO "osr.edw.integration.ti.ltax::app.CustomerEvents" 
	(
		-- "ID", -- TODO: Will need to add ID to table for event attributes
		"CUST_ID.ID",
		-- "EVENT_ID", -- Not Generated yet
		"EVENT_GROUP",
		"EVENT_NAME",
		"INIT_DATE",
		"END_DATE",
		"EVENT_VALUE",
		"DESCRIPTION",
		"INIT_TS",
		"END_TS"	
	)
	
	(
		SELECT 
			-- "SAP_CRI"."sap.cri.db.sequences::AppEventID".NEXTVAL AS "ID",
			TO_BIGINT(t1.CUST_ID) 	"CUST_ID", 
			:LV_EVENT_CATEGORY 		"EVENT_GROUP",
			t2.TA_TOKEN 			"EVENT_NAME", 
			t1."INIT_DATE", 
			t1."END_DATE",
			1 						"EVENT_VALUE",
			'' 						"DESCRIPTION",
			t1."INIT_TS", 
			t1."END_TS"
		FROM :LT_COMPLAINTS t1 
		INNER JOIN :TMP_TOKENS t2 ON t1.TRANS_ID = t2.TRANS_ID
		--LOWER(t1.DESCRIPTION) LIKE '%'|| t2.TA_TOKEN ||'%'
	);
	
	-- Truncate text.cleanText table and its resulted tokens table
	TRUNCATE TABLE "osr.edw.integration.ti.ltax::text.cleanText";
	-- Index is updated when table is cleared
	--TRUNCATE TABLE "SAP_CRI"."$TA_sap.cri.db::Index_CleanedText";
	
	-- Generate Event IDs for newly created Events
	CALL "osr.edw.integration.ti.ltax.procedure.utils::PR_UTIL_POPULATE_EVENT_ID"();
END;
