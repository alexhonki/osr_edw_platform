PROCEDURE "osr.edw.platform.fra.prt.model::SP_GRP_CCSH_QUERY"(
	IN	IV_GRP_DATE 		DATE ,
	IN  IV_GRAPH_ID			NVARCHAR(32),
	IN	IV_MATCH_PERSON		NVARCHAR(1),
	IN  IV_MAX_MEM_CNT  	INTEGER DEFAULT 2,
	OUT ET_CCTRL_ENTITY   	"osr.edw.platform.fra.prt.model::Types.ASIC.CCtrlEntityT",
	OUT ET_CCTRL_INIT_GRP 	"osr.edw.platform.fra.prt.model::Types.ASIC.CCtrlEntityT",
	OUT ET_CCTRL_HOLDER    	"osr.edw.platform.fra.prt.model::Types.ASIC.CCtrlEntityHolderT",
	OUT ET_GROUP			"osr.edw.platform.fra.prt.model::Types.GroupT"
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   READS SQL DATA AS
BEGIN

DECLARE LV_GJAHR NVARCHAR(4);
DECLARE LV_GRP_DATE DATE;

SELECT "osr.edw.platform.fra.prt.model::TF_GET_GRP_DATE"(:IV_GRP_DATE).EV_GRP_DATE INTO LV_GRP_DATE
FROM "osr.hana.platform.synonym::SYS.DUMMY";

SELECT "osr.edw.platform.fra.prt.model::TF_GET_FISCAL_YEAR"(:LV_GRP_DATE).EV_GJAHR INTO LV_GJAHR
FROM "osr.hana.platform.synonym::SYS.DUMMY";

	CALL "osr.edw.platform.fra.prt.model::SP_GRP_GRAPH_QUERY"(
		IV_GRP_DATE 	=> :LV_GRP_DATE,
		IV_GRAPH_ID		=> :IV_GRAPH_ID,
		IV_REL_TYPE     => 'SH',
		ET_REL			=> LT_GRAPH_REL
	)
	;

	IF :IV_MATCH_PERSON = 'Y' THEN
	    LT_REL = 
		SELECT
		"L"."CHILD_ID" AS "CHILD_ID",
	    CASE 
	    WHEN ("R"."PGRP_ID" IS NOT NULL) THEN "R"."PGRP_ID"
	    ELSE "L"."PARENT_ID"
	    END AS "PARENT_ID",
	    "INTEREST_PCT"
	    FROM
	    :LT_graph_rel AS "L" 
	    LEFT OUTER JOIN 
	    "osr.edw.staging.md.asic.proxy::TF_PERSON_GRP"(:IV_GRP_DATE,'') AS "R" 
	    ON "L"."PARENT_ID" = "R"."ID"
	    ;
	    
	    LT_REL = 
	    SELECT 
	    "CHILD_ID",
	    "PARENT_ID",
	    SUM("INTEREST_PCT") AS "INTEREST_PCT"
	    FROM :LT_REL
	    GROUP BY 
	    "CHILD_ID",
	    "PARENT_ID"
	    ;
	    
	ELSE
	    LT_REL = 
		SELECT
		"CHILD_ID",
	    "PARENT_ID",
	    "INTEREST_PCT"
	    FROM
	    :LT_graph_rel
		;
	    
	END IF;

-- Dummy result
ET_CCTRL_ENTITY = 
SELECT 
'CCSH' AS "REL_TYPE", 
'DUMMY' AS "ORG_ID", 
'DUMMY' AS "COMMON_CTRL_ENTITY", 
0 AS "CCTRL_ENTITY_CNT", 
0 AS "MAX_CCTRL_ENTITY_CNT", 
0 AS "INTEREST_PCT", 
'DUMMY' AS "INTEREST_PCT_DESCR" 
FROM "osr.hana.platform.synonym::SYS.DUMMY"
;

ET_CCTRL_HOLDER = 
SELECT 
'CCSH' AS "REL_TYPE", 
'DUMMY' AS "COMMON_CTRL_ENTITY", 
'DUMMY' AS "HOLDER"
FROM "osr.hana.platform.synonym::SYS.DUMMY"
;


		-- data with interest<=50%, keeps those companies whose total shares are >50%
		lt_shdata_le50 = 
		SELECT DISTINCT
			 "L"."INTEREST_PCT",
			 "L"."CHILD_ID" AS "ORG_ID",
			 "L"."PARENT_ID"
		FROM :LT_REL AS "L"
		WHERE "INTEREST_PCT">0 
		AND   "INTEREST_PCT"<=50 
		ORDER BY 
		"ORG_ID",
		"PARENT_ID";
		
		
		lt_shdata_le50_sum = SELECT sum("INTEREST_PCT"), "ORG_ID" FROM :lt_shdata_le50 GROUP BY "ORG_ID" HAVING  sum("INTEREST_PCT")>50;
		lt_shdata_le50 = SELECT * FROM :lt_shdata_le50 WHERE "ORG_ID" in (SELECT "ORG_ID" FROM :lt_shdata_le50_sum);
		
		--shareholding data for processing
		lt_shdata = 
		select 
		"INTEREST_PCT",  
		"ORG_ID",
		"PARENT_ID",
		row_number() over (partition by "ORG_ID" ORDER BY "ORG_ID", "INTEREST_PCT") AS "ROW_NUM_W"
		from :lt_shdata_le50
		order by 
		"ORG_ID",
		"PARENT_ID";
		
		--partition key
		lt_par_key = SELECT DISTINCT "ORG_ID" FROM :lt_shdata_le50;
		
		--how many members for each partition
		lt_par_mem_cnt = 
		SELECT "ORG_ID", COUNT(*) AS "PAR_MEM_CNT" FROM :lt_shdata GROUP BY "ORG_ID";
		
		lt_par = 
		SELECT 
		"L"."ORG_ID",
		"R"."PAR_MEM_CNT"
		FROM :lt_par_key AS "L" INNER JOIN :lt_par_mem_cnt AS "R"
		ON "L"."ORG_ID" = "R"."ORG_ID";
		
		-- 2 shareholders treated seperately, aggregation can be done in parallel for all companies
		lt_par_2sh = 
		SELECT 
		"ORG_ID",
		"PAR_MEM_CNT"
		FROM :lt_par
		WHERE "PAR_MEM_CNT" = 2;
		--process companies with 2 shareholders
		lt_2sh_partition =
		SELECT 
		2 AS "PAR_MEM_CNT",
		"INTEREST_PCT", 
		"ORG_ID",
		"PARENT_ID" AS "HOLDER", 
		"ROW_NUM_W"
		FROM :lt_shdata 
		WHERE "ORG_ID" IN (SELECT "ORG_ID" FROM :lt_par_2sh);
		--create common ctrl entity
		CALL "osr.edw.platform.fra.prt.model::SP_GRP_CC_PROCESS_PARTITION_2HOLDER"('SH', :lt_2sh_partition, lt_cctrl_entity, lt_cctrl_holder);
		ET_CCTRL_ENTITY = SELECT * FROM :lt_cctrl_entity;
		ET_CCTRL_HOLDER = SELECT * FROM :lt_cctrl_holder;
				
-- >2 shareholders
		lt_par_gt2sh = 
		SELECT 
		"ORG_ID",
		"PAR_MEM_CNT"
		FROM :lt_par
		WHERE "PAR_MEM_CNT" > 2 AND "PAR_MEM_CNT"<= :IV_MAX_MEM_CNT;
		--prepare partitions
		lt_partition = 
		SELECT "R"."PAR_MEM_CNT", "L"."INTEREST_PCT","L"."ORG_ID","L"."PARENT_ID" AS "HOLDER", "L"."ROW_NUM_W" 
		FROM 
		:lt_shdata AS "L" 
		INNER JOIN 
		:lt_par_gt2sh AS "R"
		ON "L"."ORG_ID" = "R"."ORG_ID";
		
		--process partitions
		CALL "osr.edw.platform.fra.prt.model::SP_GRP_CC_PROCESS_PARTITION"('SH', :lt_partition, lt_cctrl_entity,lt_cctrl_holder);

	ET_CCTRL_ENTITY = 
	SELECT * FROM :lt_cctrl_entity 
	UNION 
	SELECT * FROM :ET_CCTRL_ENTITY 
	WHERE "ORG_ID" <> 'DUMMY';
	
	ET_CCTRL_HOLDER = 
	SELECT * FROM :lt_cctrl_holder 
	UNION 
	SELECT * FROM :ET_CCTRL_HOLDER 
	WHERE "HOLDER" <> 'DUMMY';
		
	et_cctrl_init_grp = 
	SELECT 
	"REL_TYPE", "ORG_ID", "COMMON_CTRL_ENTITY", 
	"CCTRL_ENTITY_CNT", "MAX_CCTRL_ENTITY_CNT", "INTEREST_PCT", "INTEREST_PCT_DESCR"
	FROM (
	SELECT DISTINCT "REL_TYPE", "ORG_ID", "COMMON_CTRL_ENTITY", "CCTRL_ENTITY_CNT", "MAX_CCTRL_ENTITY_CNT", "INTEREST_PCT", "INTEREST_PCT_DESCR"  FROM
	(
	 SELECT * FROM :ET_CCTRL_ENTITY AS "L"
	 	WHERE EXISTS 
	 	(
	 	SELECT * FROM (SELECT "REL_TYPE", "COMMON_CTRL_ENTITY", "CCTRL_ENTITY_CNT" from :ET_CCTRL_ENTITY GROUP BY "REL_TYPE", "COMMON_CTRL_ENTITY", "CCTRL_ENTITY_CNT" HAVING COUNT(*) >= 2) AS "R" 
	 	WHERE "L"."REL_TYPE" = "R"."REL_TYPE"
	 	  AND "L"."COMMON_CTRL_ENTITY" = "R"."COMMON_CTRL_ENTITY"
	 	  AND "L"."CCTRL_ENTITY_CNT"   = "R"."CCTRL_ENTITY_CNT"
	 	)
	)	
	);
	
	ET_GROUP = 
	SELECT 
	:LV_GJAHR AS "GJAHR",
	:LV_GRP_DATE AS "GRP_DATE",
	"ORG_ID" AS "ORG_ID",
	CAST(HASH_MD5(TO_BINARY("COMMON_CTRL_ENTITY")) AS NVARCHAR) AS "GROUP_ID",
	"COMMON_CTRL_ENTITY" AS "GROUP_DESCR",
	'CCSH' AS "GROUP_TYPE"
	FROM
	:et_cctrl_init_grp
	;
	    
END