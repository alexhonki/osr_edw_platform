PROCEDURE "osr.edw.platform.fra.prt.model::SP_GRP_FINALIZE"(
	IN	IV_GRP_DATE 			DATE ,
	OUT ET_GROUP_SUMMARY		"osr.edw.platform.fra.prt.model::Types.GroupSummaryT",
	OUT ET_GROUP_ID			    "osr.edw.platform.fra.prt.model::Types.GroupIDT"
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   READS SQL DATA AS
BEGIN

DECLARE LV_GJAHR NVARCHAR(4);
DECLARE LV_GRP_DATE DATE;

IF :IV_GRP_DATE IS NULL OR :IV_GRP_DATE = TO_DATE('9999-12-31') OR :IV_GRP_DATE = '' THEN 
	SELECT CURRENT_DATE INTO LV_GRP_DATE FROM "osr.hana.platform.synonym::SYS.DUMMY";
ELSE
	LV_GRP_DATE := :IV_GRP_DATE;
END IF;


SELECT "osr.edw.platform.fra.prt.model::TF_GET_FISCAL_YEAR"(:LV_GRP_DATE).EV_GJAHR INTO LV_GJAHR
FROM "osr.hana.platform.synonym::SYS.DUMMY";

lt_initial_group = 
SELECT "GROUP_ID", "ORG_ID", 1 AS "DR_GROUP_CNT", 0 AS "SH_GROUP_CNT", 0 AS "INTERSTATE_GROUP_CNT", 0 AS "CCTRL_GROUP_CNT", 0 AS "CCDR_GROUP_CNT", 0 AS "CCSH_GROUP_CNT", 0 AS "TR_GROUP_CNT"
FROM "osr.apps.acs.synonym::SAPACS.PRTGRPI"
WHERE "GROUP_TYPE" = 'DR'
  AND "GRP_DATE" = :LV_GRP_DATE
UNION
SELECT "GROUP_ID", "ORG_ID", 0 AS "DR_GROUP_CNT", 1 AS "SH_GROUP_CNT", 0 AS "INTERSTATE_GROUP_CNT", 0 AS "CCTRL_GROUP_CNT", 0 AS "CCDR_GROUP_CNT", 0 AS "CCSH_GROUP_CNT", 0 AS "TR_GROUP_CNT"
FROM "osr.apps.acs.synonym::SAPACS.PRTGRPI"
WHERE "GROUP_TYPE" = 'SH'
  AND "GRP_DATE" = :LV_GRP_DATE
UNION
SELECT "GROUP_ID", "ORG_ID", 0 AS "DR_GROUP_CNT", 0 AS "SH_GROUP_CNT", 1 AS "INTERSTATE_GROUP_CNT", 0 AS "CCTRL_GROUP_CNT", 0 AS "CCDR_GROUP_CNT", 0 AS "CCSH_GROUP_CNT", 0 AS "TR_GROUP_CNT"
FROM "osr.apps.acs.synonym::SAPACS.PRTGRPI"
WHERE "GROUP_TYPE" = 'IS'
  AND "GRP_DATE" = :LV_GRP_DATE
UNION
SELECT "GROUP_ID", "ORG_ID", 0 AS "DR_GROUP_CNT", 0 AS "SH_GROUP_CNT", 0 AS "INTERSTATE_GROUP_CNT", 1 AS "CCTRL_GROUP_CNT", 1 AS "CCDR_GROUP_CNT", 0 AS "CCSH_GROUP_CNT", 0 AS "TR_GROUP_CNT"
FROM "osr.apps.acs.synonym::SAPACS.PRTGRPI"
WHERE "GROUP_TYPE" = 'CCDR'
  AND "GRP_DATE" = :LV_GRP_DATE
UNION
SELECT "GROUP_ID", "ORG_ID", 0 AS "DR_GROUP_CNT", 0 AS "SH_GROUP_CNT", 0 AS "INTERSTATE_GROUP_CNT", 1 AS "CCTRL_GROUP_CNT", 0 AS "CCDR_GROUP_CNT", 1 AS "CCSH_GROUP_CNT", 0 AS "TR_GROUP_CNT"
FROM "osr.apps.acs.synonym::SAPACS.PRTGRPI"
WHERE "GROUP_TYPE" = 'CCSH'
  AND "GRP_DATE" = :LV_GRP_DATE
UNION
-- Select only Trust or Org relationships 
SELECT "GROUP_ID", "ORG_ID", 0 AS "DR_GROUP_CNT", 0 AS "SH_GROUP_CNT", 0 AS "INTERSTATE_GROUP_CNT", 0 AS "CCTRL_GROUP_CNT", 0 AS "CCDR_GROUP_CNT", 0 AS "CCSH_GROUP_CNT", 1 AS "TR_GROUP_CNT"
FROM "osr.apps.acs.synonym::SAPACS.PRTGRPI"
WHERE "GROUP_TYPE" = 'TR'
  AND "GRP_DATE" = :LV_GRP_DATE
  AND (LEFT("ORG_ID",1) = 'T' OR LEFT("ORG_ID",1) = 'O')
UNION 
-- Add in trust director / shareholder org groups through TF_TR_DR_SH_REL
SELECT  "GROUP_ID", 'O'||"ACN" AS "ORG_ID", 0 AS "DR_GROUP_CNT", 0 AS "SH_GROUP_CNT", 0 AS "INTERSTATE_GROUP_CNT", 0 AS "CCTRL_GROUP_CNT", 0 AS "CCDR_GROUP_CNT", 0 AS "CCSH_GROUP_CNT", 1 AS "TR_GROUP_CNT"
FROM "osr.edw.platform.fra.prt.model::TF_TR_DR_SH_REL"(:LV_GRP_DATE)
;


/*
lt_rbc_grp_mem = 
SELECT "ORG_ID"  -- child id
FROM "osr.edw.platform.fra.prt.model::CV_GRP_INITIAL_GROUP"
WHERE "GROUP_TYPE" = 'SH'
  AND "GRP_DATE" = :LV_GRP_DATE
  AND "GROUP_DESCR" LIKE 'O%'
  ;
  */
  
-- New restriction for RBC to only count if flagged beneficially
lt_rbc_grp_mem = 
SELECT DISTINCT "ORG_ID"
FROM (
	SELECT 
		"PARENT_ID",
		"ORG_ID", 
		SUM("HLDG_COUNT_BNFCL"),
		SUM("HLDG_COUNT"),
		MAX("HLDG_COUNT_TOTAL"),
		MAX("INTEREST_PCT"),
		CASE WHEN SUM("HLDG_COUNT_BNFCL") = 0 THEN 0 
			ELSE SUM("HLDG_COUNT_BNFCL")/MAX("HLDG_COUNT_TOTAL")*100
		END AS "INTEREST_PCT_BNFCL"
	FROM (
		SELECT 
			"PARENT_ID",
			"CHILD_ID" AS "ORG_ID", -- child
			CASE WHEN "BENEF_FLAG" = 'Y' THEN "HLDG_COUNT" ELSE 0 end as "HLDG_COUNT_BNFCL",
			"BENEF_FLAG",
			"HLDG_COUNT",
			"HC"."HLDG_COUNT_TOTAL" AS "HLDG_COUNT_TOTAL",
			"INTEREST_PCT"
		FROM "osr.edw.staging.md.asic.proxy::TF_SHAREHOLDING"(:LV_GRP_DATE, 'ORD') AS "SH"
		-- This join is required because using TF_SHAREHOLDING for the HLDGCOUNT value causes an overflow error
		LEFT JOIN (
				SELECT 
					"ORG_NUMBER",
					SUM("HLDG_COUNT") AS "HLDG_COUNT_TOTAL"
					FROM (
						SELECT
							"ORG_NUMBER",
							TO_DECIMAL("HLDG_COUNT") AS "HLDG_COUNT"
						FROM "osr.edw.staging.md.asic.proxy::TF_HOLDING_C"( )
						WHERE "REC_START_DT" <= CURRENT_DATE 
						  AND "REC_END_DT" >= CURRENT_DATE
						  AND "HLDG_START_DT" <= :LV_GRP_DATE
						  AND "HOLDING_END_DT" >=  :LV_GRP_DATE
						  AND LTRIM(RTRIM(UPPER("SHARE_CLASS"))) = 'ORD'
						  AND "HLDG_COUNT" <> 0
					)  GROUP BY "ORG_NUMBER"
			) AS "HC"
		ON "SH"."ORG_NUMBER" = "HC"."ORG_NUMBER"
		WHERE "PARENT_ID" IN (
				SELECT "ORG_ID"
				FROM "osr.edw.platform.fra.prt.model::CV_GRP_INITIAL_GROUP"
				WHERE "GROUP_TYPE" = 'SH'
				  AND "GRP_DATE" = :LV_GRP_DATE
				  AND "GROUP_DESCR" LIKE 'O%'
			)
		)
	GROUP BY "PARENT_ID", "ORG_ID"
) WHERE "INTEREST_PCT_BNFCL" > 50
;


	lt_org_detail = 
	SELECT DISTINCT
	:LV_GJAHR AS "GJAHR", 
	:LV_GRP_DATE AS "GRP_DATE", 
	"L"."ORG_ID" AS "ORG_ID", 
	"L"."DR_GROUP_MEM", 
	"L"."SH_GROUP_MEM", 
	"L"."INTERSTATE_GROUP_MEM", 
	"L"."CCDR_GROUP_MEM", 
	"L"."CCSH_GROUP_MEM", 
	"L"."CCTRL_GROUP_MEM", 
	"L"."TR_GROUP_MEM",
	CASE WHEN "R"."ORG_ID" IS NULL THEN 'N' ELSE 'Y' END AS "RBC_GROUP_MEM"
	FROM 
	(
	SELECT 
	:LV_GRP_DATE AS "GJAHR", 
	:LV_GRP_DATE AS "GRP_DATE", 
	"ORG_ID",
	CASE WHEN ("DR_GROUP_CNT">0) THEN 'Y' ELSE 'N' END AS "DR_GROUP_MEM",
	CASE WHEN ("SH_GROUP_CNT">0) THEN 'Y' ELSE 'N' END AS "SH_GROUP_MEM",
	CASE WHEN ("INTERSTATE_GROUP_CNT" >0) THEN 'Y' ELSE 'N' END AS "INTERSTATE_GROUP_MEM",
	CASE WHEN ("CCTRL_GROUP_CNT">0) THEN 'Y' ELSE 'N' END AS "CCTRL_GROUP_MEM",
	CASE WHEN ("CCDR_GROUP_CNT">0) THEN 'Y' ELSE 'N' END AS "CCDR_GROUP_MEM",
	CASE WHEN ("CCSH_GROUP_CNT">0) THEN 'Y' ELSE 'N' END AS "CCSH_GROUP_MEM",
	CASE WHEN ("TR_GROUP_CNT">0) THEN 'Y' ELSE 'N' END AS "TR_GROUP_MEM"
	FROM
		(
		SELECT 
		"ORG_ID", 
		SUM("DR_GROUP_CNT") AS "DR_GROUP_CNT", 
		SUM("SH_GROUP_CNT") AS "SH_GROUP_CNT", 
		SUM("INTERSTATE_GROUP_CNT") AS "INTERSTATE_GROUP_CNT", 
		SUM("CCTRL_GROUP_CNT") AS "CCTRL_GROUP_CNT", 
		SUM("CCDR_GROUP_CNT") AS "CCDR_GROUP_CNT",
		SUM("CCSH_GROUP_CNT") AS "CCSH_GROUP_CNT",
		SUM("TR_GROUP_CNT") AS "TR_GROUP_CNT" 
		FROM :lt_initial_group
		GROUP BY "ORG_ID"
		)
	) AS "L"
	LEFT OUTER JOIN
	:lt_rbc_grp_mem AS "R"
	ON "L"."ORG_ID"  = "R"."ORG_ID"
	;
/*	
lt_group = 
SELECT 
"GJAHR",
TO_DATE(LEFT("GRP_DATE",4)|| '-' || RIGHT(LEFT("GRP_DATE",6),2) || '-' || RIGHT("GRP_DATE",2)) AS "GRP_DATE",
"ELEMENT" AS "ORG_ID", 
"PARENT_ELEMENT" AS "GROUP_ID_DS"
FROM "osr.apps.acs.synonym::SAPACS.PRTGRPDS"
WHERE LEFT("ELEMENT",1) = 'O'
  AND "GRP_DATE" = :LV_GRP_DATE
;
*/

LT_GROUP = 
	SELECT DISTINCT
		"GJAHR",
		TO_DATE(LEFT("GRP_DATE",4)|| '-' || RIGHT(LEFT("GRP_DATE",6),2) || '-' || RIGHT("GRP_DATE",2)) AS "GRP_DATE",
		"ELEMENT" AS "ORG_ID", 
		"PARENT_ELEMENT" AS "GROUP_ID_DS"
	FROM "osr.apps.acs.synonym::SAPACS.PRTGRPDS"
	WHERE (LEFT("ELEMENT",1) = 'O' OR LEFT("ELEMENT",1) = 'T') 
	  AND "GRP_DATE" = :LV_GRP_DATE
;



lt_group_id =
SELECT DISTINCT
"GJAHR",
"GRP_DATE",
CAST(HASH_MD5(TO_BINARY("GROUP_DESCR")) AS NVARCHAR) AS "GROUP_ID", 
"GROUP_DESCR",
"GROUP_ID_DS"
FROM (
SELECT 
"GJAHR",
"GRP_DATE",
"GROUP_ID_DS",
STRING_AGG("ORG_ID", '|' ORDER BY "ORG_ID" ASC) AS "GROUP_DESCR"
FROM
:lt_group
GROUP BY 
"GJAHR",
"GRP_DATE",
"GROUP_ID_DS"
)
;

et_group_id = 
SELECT DISTINCT
"GJAHR",
"GRP_DATE",
"GROUP_ID", 
'SUBS' AS "GROUP_TYPE",
LEFT("GROUP_DESCR",1333) AS "GROUP_DESCR"
FROM :lt_group_id
;


lt_group_w_group_id = 
SELECT DISTINCT
"GROUP"."GJAHR" AS "GJAHR",
"GROUP"."GRP_DATE" AS "GRP_DATE",
"GROUP"."ORG_ID" AS "ORG_ID",
"GROUP_ID"."GROUP_ID" AS "GROUP_ID"
FROM 
:lt_group AS "GROUP"
INNER JOIN 
:lt_group_id AS "GROUP_ID"
ON  "GROUP"."GJAHR" = "GROUP_ID"."GJAHR"
AND "GROUP"."GRP_DATE" = "GROUP_ID"."GRP_DATE"
AND "GROUP"."GROUP_ID_DS" = "GROUP_ID"."GROUP_ID_DS"
;

/*
ET_GROUP_SUMMARY = 
SELECT 
DISTINCT
 "L"."GJAHR", 
 "L"."GRP_DATE", 
 "L"."ORG_ID" AS "ORG_ID", 
 "L"."GROUP_ID" AS "GROUP_ID",
 RIGHT("L"."ORG_ID",9) AS "ACN",
 CASE 
 WHEN "MAP"."ABN" IS NULL 
 THEN '' 
 ELSE "MAP"."ABN"
 END AS "ABN",
 "R"."DR_GROUP_MEM",
 "R"."SH_GROUP_MEM",
 "R"."INTERSTATE_GROUP_MEM",
 "R"."CCDR_GROUP_MEM",
 "R"."CCSH_GROUP_MEM",
 "R"."CCTRL_GROUP_MEM",
 "R"."TR_GROUP_MEM",
 "R"."RBC_GROUP_MEM",
'N' AS "MEM_REL_BODY_CORP"
 FROM 
:lt_group_w_group_id  AS "L"
 INNER JOIN
 :lt_org_detail AS "R"
 ON  "L"."GJAHR" = "R"."GJAHR"
 AND "L"."GRP_DATE" = "R"."GRP_DATE"
 AND "L"."ORG_ID" = "R"."ORG_ID"
 LEFT OUTER JOIN
 "osr.edw.platform.fra.prt.model::TF_GRP_ABN_ACN_MAPPING"(:IV_GRP_DATE) AS "MAP"
 ON RIGHT("L"."ORG_ID",9) = "MAP"."ACN"
 ;
 */
 LT_ORIGINAL_GROUPS = 
 SELECT DISTINCT
				"L"."GJAHR", 
				"L"."GRP_DATE", 
				"L"."ORG_ID" AS "ORG_ID", 
				"L"."GROUP_ID" AS "GROUP_ID",
				RIGHT("L"."ORG_ID",9) AS "ACN",
				CASE WHEN "MAP"."ABN" IS NULL THEN '' ELSE "MAP"."ABN" END AS "ABN",
				"R"."DR_GROUP_MEM",
				"R"."SH_GROUP_MEM",
				"R"."INTERSTATE_GROUP_MEM",
				"R"."CCDR_GROUP_MEM",
				"R"."CCSH_GROUP_MEM",
				"R"."CCTRL_GROUP_MEM",
				"R"."TR_GROUP_MEM",
				"R"."RBC_GROUP_MEM",
				'N' AS "MEM_REL_BODY_CORP"
			FROM 
			:LT_GROUP_W_GROUP_ID AS "L"
			INNER JOIN
			:LT_ORG_DETAIL AS "R"
			 ON  "L"."GJAHR" = "R"."GJAHR"
			 AND "L"."GRP_DATE" = "R"."GRP_DATE"
			 AND "L"."ORG_ID" = "R"."ORG_ID"
			LEFT OUTER JOIN
			"osr.edw.platform.fra.prt.model::TF_GRP_ABN_ACN_MAPPING"(:IV_GRP_DATE) AS "MAP"
			ON RIGHT("L"."ORG_ID",9) = "MAP"."ACN"
			WHERE LEFT("L"."ORG_ID",1) = 'O'
;

LT_TRUST_GROUPS = 
			SELECT DISTINCT
				"L"."GJAHR", 
				"L"."GRP_DATE", 
				"L"."ORG_ID" AS "ORG_ID", 
				"L"."GROUP_ID" AS "GROUP_ID",
				"MAP"."ACN" AS "ACN",
				RIGHT("L"."ORG_ID",11) AS "ABN",
				"R"."DR_GROUP_MEM",
				"R"."SH_GROUP_MEM",
				"R"."INTERSTATE_GROUP_MEM",
				"R"."CCDR_GROUP_MEM",
				"R"."CCSH_GROUP_MEM",
				"R"."CCTRL_GROUP_MEM",
				"R"."TR_GROUP_MEM",
				"R"."RBC_GROUP_MEM",
				'N' AS "MEM_REL_BODY_CORP"
			FROM 
			:LT_GROUP_W_GROUP_ID  AS "L"
			INNER JOIN
			:LT_ORG_DETAIL AS "R"
			ON  "L"."GJAHR" = "R"."GJAHR"
			AND "L"."GRP_DATE" = "R"."GRP_DATE"
			AND "L"."ORG_ID" = "R"."ORG_ID"
			LEFT OUTER JOIN
			"osr.edw.platform.fra.prt.model::TF_GRP_ABN_ACN_MAPPING"(:IV_GRP_DATE) AS "MAP"
			ON RIGHT("L"."ORG_ID",11) = "MAP"."ABN"
			WHERE LEFT("L"."ORG_ID",1) = 'T'
			-- remove duplicated orgs if exist as they will create duplicate records for the ABN (one for trust and one for org) 
			--AND RIGHT("L"."ORG_ID",11) NOT IN ( 
				--SELECT "ABN" FROM :LT_ORIGINAL_GROUPS
			--)
;
 
ET_GROUP_SUMMARY = 
			SELECT DISTINCT
			"GJAHR",
			"GRP_DATE",
			"ORG_ID",
			"GROUP_ID",
			"ACN",
			"ABN",
			"DR_GROUP_MEM",
			"SH_GROUP_MEM",
			"INTERSTATE_GROUP_MEM",
			"CCDR_GROUP_MEM",
			"CCSH_GROUP_MEM",
			"CCTRL_GROUP_MEM",
			"TR_GROUP_MEM",
			"RBC_GROUP_MEM",
			'N' AS "MEM_REL_BODY_CORP"
		FROM (
			SELECT * FROM :LT_ORIGINAL_GROUPS 
			UNION 
			SELECT * FROM :LT_TRUST_GROUPS
		) 

;


END