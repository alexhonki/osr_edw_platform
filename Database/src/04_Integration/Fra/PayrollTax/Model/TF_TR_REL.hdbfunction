FUNCTION "osr.edw.platform.fra.prt.model::TF_TR_REL"(IV_KEY_DATE DATE )
       RETURNS TABLE (
       		"CHILD_ID"				NVARCHAR(12), -- Beneficiary
       		"PARENT_ID"				NVARCHAR(12), -- Trust
       		"BNFCRY_ABN"			NVARCHAR(12),
       		"TRUST_ABN"				NVARCHAR(12),
       		"GJAHR"					NVARCHAR(4),
       		"ORG_NUMBER"			NVARCHAR(9), -- ACN if exists
			"PERSON_NUM"			NVARCHAR(9), -- If IND / no ABN
			"START_DT"				DATE,
			"END_DT"				DATE,
			"TR_BENFCRY_COUNT"		INTEGER,
			"ENT_TYP_CD"			NVARCHAR(3)
       )
       LANGUAGE SQLSCRIPT 
       SQL SECURITY INVOKER AS 
BEGIN 

DECLARE LV_KEY_DATE DATE;
DECLARE LV_GJAHR NVARCHAR(4);
DECLARE LV_GRP_DATE DATE;

IF :IV_KEY_DATE IS NULL OR :IV_KEY_DATE = TO_DATE('9999-12-31') OR :IV_KEY_DATE = '' THEN 
	SELECT CURRENT_DATE INTO LV_KEY_DATE FROM "osr.hana.platform.synonym::SYS.DUMMY";
ELSE
	LV_KEY_DATE := :IV_KEY_DATE;
END IF;

-- use fiscal year start and end dates of the key date to restrict data
SELECT "osr.edw.platform.fra.prt.model::TF_GET_FISCAL_YEAR"(:LV_GRP_DATE).EV_GJAHR INTO LV_GJAHR
FROM "osr.hana.platform.synonym::SYS.DUMMY";

lt_pers = 
	SELECT DISTINCT
		"PGRP"."PGRP_ID",
		"PERS"."GIVEN_NAME1", 
		"PERS"."GIVEN_NAME2",  
		"PERS"."SURNAME", 
		"PERS"."BIRTH_DT"
		FROM "osr.edw.platform.fra.prt.model::TF_GRP_PERSON_GRP"(:LV_KEY_DATE,'R') AS "PGRP"
		INNER JOIN "osr.edw.staging.md.asic.proxy::TF_PERSON_NAME_DUP"(:LV_KEY_DATE, 2) AS "PERS"
		ON "PERS"."ID" = "PGRP"."ID"
;
/*
3.	Differentiate between beneficiary types of individuals and non-individuals by matching the [PTNR_BNFCRY_ABN] to ABR data [ABN] to identify [ENTITY_TYPE] whereby:
o	IND = Individuals, FPT = Family Trust, COY = Company, PTR = Partnership, SUP = Superannuation Fund, TRT = Trust 
o	If no ABN is present then where [PTNR_BNFCRY_FIRST_NM] is not NULL and [PTNR_BNFCRY_FIRST_SRNM] is not NULL and [PTNR_BNFCRY_DOB] is not NULL then [ENTITY_TYPE] = IND else NOT APPLICABLE

5.	Exclude exempt beneficiaries by matching the ABR Agency [PID] to the ABR ACNC [PID]. 
Beneficiaries identified as a registered charitable institution will be removed. 
Note that any non-exempt beneficiaries will be considered for grouping. (To be excluded just before matching.)
*/
lt_ABR = 
	SELECT DISTINCT
		"ABN",
		"ENT_TYP_CD", 
		"PID",
		"ACN"
	FROM "osr.edw.staging.md.abr.proxy::TF_AGENCY_DATA_C"()
	WHERE "ABN_REGN_DT"  <= :LV_KEY_DATE
	  AND "ABN_CANCN_DT" >= :LV_KEY_DATE
;

LT_DATA = 
SELECT 
	"PTNR_BNFCRY_ABN",
	"TRUST"."ABN",
	"TRUST"."RTN_YR",
	"BNFCRY"."PTNR_BNFCRY_FIRST_NM",
	"BNFCRY"."PTNR_BNFCRY_OTHR_GVN_NM",
	"BNFCRY"."PTNR_BNFCRY_SRNM",
	"BNFCRY"."PTNR_BNFCRY_DOB"
FROM "osr.edw.source.td.ato.proxy::CV_ITRBNFCRY" AS "BNFCRY" 
INNER JOIN "osr.edw.source.md.ato.proxy::CV_ITRBNFCRY_TTEE" AS "TRUST"
ON  "BNFCRY"."REF_ID" = "TRUST"."REF_ID"
-- INCLUDE AFTER TESTING
--	AND "BNFCRY"."RTN_YR" = "TRUST"."RTN_YR" -- add this back in later as there is no data in dev for the moment! 
WHERE "TRUST"."ABN" <> 'invalid ABN'
AND "TRUST"."TRUST_TYP" IN ('S', 'T', 'I')
-- remove records we can't process due to information being withheld by ATO
AND "BNFCRY"."PTNR_BNFCRY_REF_ID" <> 0 
-- REMOVE AFTER TESTING
		AND	"BNFCRY"."PTNR_BNFCRY_ABN" IN (
		'11797737279'
		,'14853926895'
		,'64175894971'
		,'80830647522'
		,'27816336576'
		,'32624288234'
		,'44372258429'
		,'27816336576'
		)
		AND "TRUST"."ABN" IN (
		'71256622977',
		'64175894971',
		'26257558531',
		'71256622977',
		'32624288234',
		'28380160124',
		'28380160124',
		'28380160124',
		'71256622977',
		'71256622977',
		'11709639794',
		'90397942656',
		'45358248690',
		'90809049629',
		'59627509121',
		'61919873656'
		)
;

LT_REL = 
	SELECT DISTINCT
		"MAP"."ACN"					AS "ORG_NUMBER",
		CASE	WHEN "MAP"."ACN" is not null 
					THEN concat('O', "MAP"."ACN") -- BNFCRY has an ACN so use that
				WHEN "DATA"."PTNR_BNFCRY_ABN" <> 'no ABN' 
					THEN CONCAT('T',"DATA"."PTNR_BNFCRY_ABN") 
		END 						AS "CHILD_ID", 
		"DATA"."PTNR_BNFCRY_ABN"	AS "CHILD_NUM",
		"DATA"."ABN"				AS "PARENT_ID",
		"DATA"."RTN_YR"				AS "GJAHR",
		"PERS"."PGRP_ID"			AS "PERSON_NUM",
		CASE 
			WHEN (	"DATA"."PTNR_BNFCRY_FIRST_NM"		IS NULL AND
					"DATA"."PTNR_BNFCRY_OTHR_GVN_NM"	IS NULL AND 
					"DATA"."PTNR_BNFCRY_SRNM"			IS NULL AND  
					"DATA"."PTNR_BNFCRY_DOB"			IS NULL AND 
					("DATA"."PTNR_BNFCRY_ABN"			IS NULL OR "DATA"."PTNR_BNFCRY_ABN" = 'no ABN')) OR
					"DATA"."PTNR_BNFCRY_ABN" = 'no ABN'
				THEN 'IND' 
			ELSE "ABR"."ENT_TYP_CD"	
		END AS "ENT_TYP_CD",
		TO_DATE(TO_VARCHAR((CAST("DATA"."RTN_YR" as integer) -1)) || '0701') AS "START_DT",
		TO_DATE("DATA"."RTN_YR" || '0630') AS "END_DT"
	FROM :LT_DATA AS "DATA"
	LEFT OUTER JOIN "osr.edw.platform.fra.prt.model::TF_GRP_ABN_ACN_MAPPING"(:IV_KEY_DATE) AS "MAP"
	ON "DATA"."PTNR_BNFCRY_ABN" = "MAP"."ABN"
	LEFT OUTER JOIN :lt_pers AS "PERS"
	ON "DATA"."PTNR_BNFCRY_FIRST_NM" = "PERS"."GIVEN_NAME1"
		AND "DATA"."PTNR_BNFCRY_OTHR_GVN_NM" = "GIVEN_NAME2"
		AND "DATA"."PTNR_BNFCRY_SRNM" = "SURNAME"
		AND  "DATA"."PTNR_BNFCRY_DOB"  = "BIRTH_DT"
	LEFT OUTER JOIN :lt_ABR AS "ABR"
	ON "DATA"."PTNR_BNFCRY_ABN" = "ABR"."ABN"
;

-- Add extra row for the sole traders and directors so we can look up their director / shareholdings
LT_DR_SH = 
	SELECT 
		"ORG_NUMBER",
		"PERSON_NUM" AS "CHILD_ID", -- for looking up later
		"CHILD_NUM",
		"PARENT_ID",
		"GJAHR",
		"PERSON_NUM",
		"ENT_TYP_CD",
		"START_DT",
		"END_DT"
	FROM :LT_REL 
	--WHERE ("ENT_TYP_CD" = 'IND' AND "CHILD_ID" <> 'no ABN' AND "CHILD_ID" is not null AND "PERSON_NUM" is not null) 
	--	OR "PERSON_NUM" = 'C030118268'; -- remove this line after testing
	WHERE "PERSON_NUM" is not null; 

LT_REL = SELECT * FROM :LT_REL UNION SELECT * FROM :LT_DR_SH;

-- Add trust self relationships so they get added to the groups even if they have no other relationships
LT_REL = 
SELECT * FROM :LT_REL 
UNION
SELECT DISTINCT
		null as "ORG_NUMBER",
		CONCAT('T', "PARENT_ID") AS "CHILD_ID", 
		"CHILD_NUM",
		"PARENT_ID",
		"GJAHR",
		null AS "PERSON_NUM",
		'TRT' AS "ENT_TYP_CD",
		"START_DT",
		"END_DT"
FROM :LT_REL;

lt_tr_cnt = 
SELECT "PARENT_ID", "GJAHR", COUNT(*) AS "TR_BENFCRY_COUNT" 
FROM :lt_rel 
GROUP BY "PARENT_ID", "GJAHR";

-- CHILD_ID will display the trust Beneficiary ABN prefixed with a "T"
-- However if there is an ACN found for the beneficiary, it will display the ACN instead
-- Or it will display the Person Group ID if the beneficiary is natural person. 
RETURN 
	SELECT * FROM (
		SELECT DISTINCT
			"REL"."CHILD_ID" AS "CHILD_ID", -- Beneficiary is another trust 
			CONCAT('T',"REL"."PARENT_ID") AS "PARENT_ID",
			"REL"."CHILD_NUM"  AS "BNFCRY_ABN",
			"REL"."PARENT_ID" AS "TRUST_ABN",
			"REL"."GJAHR",
			"REL"."ORG_NUMBER",
			"REL"."PERSON_NUM",
			"REL"."START_DT",
			"REL"."END_DT",
			"CNT"."TR_BENFCRY_COUNT",
			"REL"."ENT_TYP_CD" -- TODO Add logic for individual sole traders
			FROM :lt_rel AS "REL" INNER JOIN :lt_tr_cnt AS "CNT"
			ON "REL"."PARENT_ID" = "CNT"."PARENT_ID"
			WHERE :IV_KEY_DATE >= "REL"."START_DT"
			AND  :IV_KEY_DATE <= "REL"."END_DT"
			AND "CNT"."TR_BENFCRY_COUNT" > 1
	) WHERE "CHILD_ID" is not null
;

END;