PROCEDURE "osr.edw.platform.fra.prt.model::SP_GRP_GRAPH_GET_VERTEX_N_EDGE_TEST_GRP"(
	IN  IV_GRP_DATE        DATE,
	IN	IV_MATCH_PERSON	   NVARCHAR(1),
	IN	IV_GRP_TYPE			NVARCHAR(2), -- give value if you want to test specific data set. leave blank if testing all. 
	OUT ET_ELEMENT         "osr.edw.platform.fra.prt.model::Types.DisjointElementT",
	OUT ET_ELEMENT_REL	   "osr.edw.platform.fra.prt.model::Types.DisjointElementRelT"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   READS SQL DATA AS
BEGIN

DECLARE LV_ORG_PREFIX	NVARCHAR(1); 
DECLARE LV_PSN_PREFIX	NVARCHAR(1);
DECLARE LV_PGP_PREFIX	NVARCHAR(1);

-- Added for trust 
DECLARE LV_TRUST_PREFIX	NVARCHAR(1);
DECLARE LV_BNFCRY_PREFIX	NVARCHAR(1);


LV_ORG_PREFIX := '0';
LV_PSN_PREFIX := '1'; 
LV_PGP_PREFIX := '2';

-- Added for trust 
LV_TRUST_PREFIX := '3';
LV_BNFCRY_PREFIX := '4';


LT_SH = 
SELECT
'000000011' AS "ORG_NUMBER",
'O000000010' AS "PARENT_ID",
'O000000011' AS "CHILD_ID"
FROM "osr.hana.platform.synonym::SYS.DUMMY"
UNION
SELECT
'000000012'AS "ORG_NUMBER",
'O000000010' AS "PARENT_ID",
'O000000012' AS "CHILD_ID"
FROM "osr.hana.platform.synonym::SYS.DUMMY"
UNION
SELECT
'000000010' AS "ORG_NUMBER",
'O000000020' AS "PARENT_ID",
'O000000010' AS "CHILD_ID"
FROM "osr.hana.platform.synonym::SYS.DUMMY"
UNION 
SELECT
'000000020' AS "ORG_NUMBER",
'P000000001' AS "PARENT_ID",
'O000000020' AS "CHILD_ID"
FROM "osr.hana.platform.synonym::SYS.DUMMY"
;

LT_DR = 
SELECT
'000000031' AS "ORG_NUMBER",
'000000002' AS "PERSON_NUM",
'O000000031' AS "CHILD_ID",
'P000000002' AS "PARENT_ID"
FROM "osr.hana.platform.synonym::SYS.DUMMY"
UNION
SELECT
'000000032' AS "ORG_NUMBER",
'000000002' AS "PERSON_NUM",
'O000000032' AS "CHILD_ID",
'P000000002' AS "PARENT_ID"
FROM "osr.hana.platform.synonym::SYS.DUMMY"
UNION
SELECT
'000000032' AS "ORG_NUMBER",
'000000003' AS "PERSON_NUMBER",
'O000000032' AS "CHILD_ID",
'P000000003' AS "PARENT_ID"
FROM "osr.hana.platform.synonym::SYS.DUMMY"
;

LT_PG = 
SELECT
'P000000002' AS "ID",
'C000000001' AS "PGRP_ID"
FROM "osr.hana.platform.synonym::SYS.DUMMY"
UNION
SELECT
'P000000003' AS "ID",
'C000000001' AS "PGRP_ID"
FROM "osr.hana.platform.synonym::SYS.DUMMY"
;
-- trust variant 0 - with ACN's

-- trust variants
IF :IV_GRP_TYPE = 'TR'  THEN
	LT_TR = 
		SELECT
			"ORG_NUMBER", -- ACN
			RIGHT("CHILD_ID",(LENGTH("CHILD_ID")-1)) AS "BNFCRY_ABN", -- Beneficiary
			"PARENT_ID", -- Trust
			"CHILD_ID"
		FROM "osr.edw.platform.fra.prt.model::TF_TR_REL"(:IV_GRP_DATE)
	;
END IF;	

IF :IV_GRP_TYPE = 'T1' OR :IV_GRP_TYPE = '' THEN
	LT_TR = 
		SELECT
			"ORG_NUMBER", -- ACN
			RIGHT("CHILD_ID",(LENGTH("CHILD_ID")-1)) AS "BNFCRY_ABN", -- Beneficiary
			"PARENT_ID", -- Trust
			"CHILD_ID"
		FROM "osr.edw.platform.fra.prt.model::TF_TR_REL_TEST_DATA"(:IV_GRP_DATE)
	;
END IF;


LT_ELEMENT_REL = 
	SELECT 
		"BNFCRY_ABN"	AS "ELEMENT_L_NUM", 
		RIGHT("PARENT_ID",(LENGTH("PARENT_ID")-1)) AS "ELEMENT_R_NUM",
		"CHILD_ID",
		"PARENT_ID"
	FROM :LT_TR
;


-- Shareholdings
IF :IV_GRP_TYPE = 'SH' THEN

 LT_ELEMENT_REL = 
-- shareholding relation
   SELECT 
   TO_BIGINT(:LV_ORG_PREFIX || "ORG_NUMBER") AS "ELEMENT_L_NUM", 
   CASE WHEN LEFT("PARENT_ID",1) = 'O' THEN TO_BIGINT(:LV_ORG_PREFIX || RIGHT("PARENT_ID",9)) 
   ELSE TO_BIGINT(:LV_PSN_PREFIX || RIGHT("PARENT_ID",9)) 
   END AS "ELEMENT_R_NUM",
   "CHILD_ID",
   "PARENT_ID"
   FROM 
   :LT_SH;
   
END IF;

-- directors
IF :IV_GRP_TYPE = 'DR' THEN
	LT_ELEMENT_REL = 
	-- director relation 
	   SELECT 
		    TO_BIGINT(:LV_ORG_PREFIX || "ORG_NUMBER") AS "ELEMENT_L_NUM", 
		    TO_BIGINT(:LV_PSN_PREFIX || "PERSON_NUM") AS "ELEMENT_R_NUM",
		    "CHILD_ID",
		    "PARENT_ID"
	   FROM :LT_DR;
END IF;


-- All groups
IF :IV_GRP_TYPE = '' THEN
   LT_ELEMENT_REL = 
-- shareholding relation
   SELECT 
   TO_BIGINT(:LV_ORG_PREFIX || "ORG_NUMBER") AS "ELEMENT_L_NUM", 
   CASE WHEN LEFT("PARENT_ID",1) = 'O' THEN TO_BIGINT(:LV_ORG_PREFIX || RIGHT("PARENT_ID",9)) 
   ELSE TO_BIGINT(:LV_PSN_PREFIX || RIGHT("PARENT_ID",9)) 
   END
   AS "ELEMENT_R_NUM",
   "CHILD_ID",
   "PARENT_ID"
   FROM 
   :LT_SH
   UNION
-- director relation 
   SELECT 
    TO_BIGINT(:LV_ORG_PREFIX || "ORG_NUMBER") AS "ELEMENT_L_NUM", 
    TO_BIGINT(:LV_PSN_PREFIX || "PERSON_NUM") AS "ELEMENT_R_NUM",
    "CHILD_ID",
    "PARENT_ID"
   FROM 
   :LT_DR
     UNION
-- trust relation 
	SELECT 
		"BNFCRY_ABN"	AS "ELEMENT_L_NUM", 
		RIGHT("PARENT_ID",(LENGTH("PARENT_ID")-1)) AS "ELEMENT_R_NUM",
		"CHILD_ID",
		"PARENT_ID"
	FROM :LT_TR
   ;
END IF;

-- All groups without trusts
IF :IV_GRP_TYPE = 'NT' THEN
   LT_ELEMENT_REL = 
-- shareholding relation
   SELECT 
   TO_BIGINT(:LV_ORG_PREFIX || "ORG_NUMBER") AS "ELEMENT_L_NUM", 
   CASE WHEN LEFT("PARENT_ID",1) = 'O' THEN TO_BIGINT(:LV_ORG_PREFIX || RIGHT("PARENT_ID",9)) 
   ELSE TO_BIGINT(:LV_PSN_PREFIX || RIGHT("PARENT_ID",9)) 
   END
   AS "ELEMENT_R_NUM",
   "CHILD_ID",
   "PARENT_ID"
   FROM 
   :LT_SH
   UNION
-- director relation 
   SELECT 
    TO_BIGINT(:LV_ORG_PREFIX || "ORG_NUMBER") AS "ELEMENT_L_NUM", 
    TO_BIGINT(:LV_PSN_PREFIX || "PERSON_NUM") AS "ELEMENT_R_NUM",
    "CHILD_ID",
    "PARENT_ID"
   FROM 
   :LT_DR
   ;
END IF;



IF :IV_MATCH_PERSON = 'Y' THEN

   LT_ELEMENT_REL = 
		SELECT 
		   "ELEMENT_L_NUM", 
		   "ELEMENT_R_NUM",
		   "CHILD_ID",
		   "PARENT_ID"
	   FROM :LT_ELEMENT_REL
	   UNION
	-- person to person group relation  
	   SELECT 
		    TO_BIGINT(:LV_PSN_PREFIX || RIGHT("ID",9))		AS "ELEMENT_L_NUM", 
		    TO_BIGINT(:LV_PGP_PREFIX || RIGHT("PGRP_ID",9)) AS "ELEMENT_R_NUM", 
		    "ID"											AS "CHILD_ID",
		    "PGRP_ID"										AS "PARENT_ID"
	   FROM :LT_PG
	;
	
END IF;


-- Outputs
   ET_ELEMENT = 
   SELECT DISTINCT 
		"ELEMENT_NUM", 
		"ELEMENT" 
   FROM (
	   SELECT 
		   "ELEMENT_L_NUM"	AS "ELEMENT_NUM", 
		   "CHILD_ID"		AS "ELEMENT" 
	   FROM :LT_ELEMENT_REL
	   UNION
	   SELECT 
		   "ELEMENT_R_NUM" AS "ELEMENT_NUM", 
		   "PARENT_ID" AS "ELEMENT" 
	   FROM :LT_ELEMENT_REL
   )
   ;
   
   ET_ELEMENT_REL = 
   SELECT DISTINCT
	   "ELEMENT_L_NUM", 
	   "ELEMENT_R_NUM"
   FROM :LT_ELEMENT_REL
   ;
   
   /*
       table type DisjointElementT {
        ELEMENT_NUM : Integer64;
        ELEMENT     : String(32);
    };
        table type DisjointElementRelT {
        ELEMENT_L_NUM : Integer64;
        ELEMENT_R_NUM : Integer64;
    };
    */
   
END;