PROCEDURE "osr.edw.platform.fra.prt.dt.abn.wages.ex::SP_CntrAnnualWageExceedingThld"( 
    IN  it_data_for_rule 	"osr.edw.platform.fra.prt.dt.abn::Types.wages.data_wage",
    IN 	parameters          "osr.edw.platform.fra.prt.dt.abn::Types.wages.param_exceeding_u",
    OUT et_data	       		"osr.edw.platform.fra.prt.dt.abn::Types.wages.ContractorEstimatedTaxData",
    OUT et_result       	"osr.edw.platform.fra.prt.dt.abn::Types.wages.result_w_amnt",
    OUT et_text             "osr.edw.platform.fra.prt.dt.abn::Types.wages.text"
	
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   READS SQL DATA AS
BEGIN

DECLARE lv_gjahr NVARCHAR(4);  

DECLARE lv_mode NVARCHAR(1);  

DECLARE lv_thld_yearly Decimal(15,2) ;
DECLARE lx_ato NVARCHAR(1) DEFAULT 'N';
DECLARE lx_wcq NVARCHAR(1) DEFAULT 'N';
DECLARE lx_interstate NVARCHAR(1) DEFAULT 'N';

DECLARE lv_scenario NVARCHAR(10); -- PRT3.1 = TPAR, PRT3.2 = CNTR

SELECT 
	"RUN_MODE",
	"SCENARIO",
	"THRESHOLD_YEARLY",
	"FLAG_ATO",
	"FLAG_WCQ",
	"FLAG_INTERSTATE"
INTO 
	lv_mode,
	lv_scenario,
	lv_thld_yearly,
	lx_ato,
	lx_wcq,
	lx_interstate
FROM :PARAMETERS LIMIT 1;

SELECT top 1 TO_NVARCHAR("GJAHR") into lv_gjahr FROM :it_data_for_rule ;	

IF lv_scenario = 'PRT3.1' THEN -- TPAR

	lt_result_new = 
		SELECT 		
			"ABN",
			"PERIOD_CATEGORY",
			"PERIOD_KEY",
			"GJAHR", 
			100 AS "DETECTION_RESULT",
			"ITR_WAGES" AS "WAGE",
			CASE WHEN "ITR_EST_TAX_LESS_RMS" < 0 THEN 0 ELSE "ITR_EST_TAX_LESS_RMS" END AS "RISK_AMOUNT",
			'AUD' AS "CURRENCY"
		FROM "osr.edw.platform.fra.prt.dt.abn.wages::TF_CNTR_TAX_CALCULATION"(:lv_gjahr, :lx_interstate)
		WHERE "ITR_WAGES" >= :lv_thld_yearly
		;
END IF;

IF lv_scenario = 'PRT3.2' THEN -- ITR

	lt_result_new = 
		SELECT 		
			"ABN",
			"PERIOD_CATEGORY",
			"PERIOD_KEY",
			"GJAHR", 
			100 AS "DETECTION_RESULT",
			"TPAR_WAGES" AS "WAGE",
			CASE WHEN "TPAR_EST_TAX_LESS_RMS" < 0 THEN 0 ELSE "TPAR_EST_TAX_LESS_RMS" END AS "RISK_AMOUNT",
			'AUD' AS "CURRENCY"
		FROM "osr.edw.platform.fra.prt.dt.abn.wages::TF_CNTR_TAX_CALCULATION"(:lv_gjahr, :lx_interstate)
		WHERE "TPAR_WAGES" >= :lv_thld_yearly
	;
END IF;



IF :lv_mode = 'R' THEN

	et_result = 
		SELECT
			"ABN",
			"PERIOD_CATEGORY",
			"PERIOD_KEY",
			"GJAHR",
			CASE WHEN "RISK_AMOUNT" = 0 THEN 0
				ELSE CASE WHEN "RISK_AMOUNT" >= 1 AND "RISK_AMOUNT" < 10000 THEN 1
				ELSE CASE WHEN "RISK_AMOUNT" >= 10000 AND "RISK_AMOUNT" < 20000 THEN 2
				ELSE CASE WHEN "RISK_AMOUNT" >= 20000 AND "RISK_AMOUNT" < 30000 THEN 3
				ELSE CASE WHEN "RISK_AMOUNT" >= 30000 AND "RISK_AMOUNT" < 50000 THEN 4
				ELSE CASE WHEN "RISK_AMOUNT" >= 50000 THEN 5 
			END END END END END END AS "DETECTION_RESULT",
			"RISK_AMOUNT",
			"CURRENCY" 
		FROM :lt_result_new
	;

	et_text = 
		SELECT 
			"ABN",
			"PERIOD_CATEGORY",
			"PERIOD_KEY",
			"GJAHR",
			'' AS "TEXT",
			'/OSRQLD/FRA_PRT'			AS "MSGID",
			'033'						AS "MSGNO",
			TO_DECIMAL("WAGE",15,2) 	AS "MSGV1",
			"CURRENCY" 					AS "MSGV2",
			''							AS "MSGV3",
			''							AS "MSGV4",
			'ATO_BAS_TOTL_PMT_FOR_WRK_AMT'	AS "MSGV1_FC",
			'ATO_BAS_TOTL_PMT_FOR_WRK_AMT'	AS "MSGV2_FC",
			'PERIOD_KEY'				AS "MSGV3_FC",
			''							AS "MSGV4_FC"
		FROM :lt_result_new
	;

END IF;

IF :lv_mode = 'S' THEN

	et_result = 
		SELECT
			"ABN",
			"PERIOD_CATEGORY",
			"PERIOD_KEY",
			"GJAHR",
			100 AS "DETECTION_RESULT",
			"RISK_AMOUNT",
			"CURRENCY" 
		FROM :lt_result_new
	;

	et_text = 
		SELECT 
			"ABN",
			"PERIOD_CATEGORY",
			"PERIOD_KEY",
			"GJAHR",
			'' AS "TEXT",
			'/OSRQLD/FRA_PRT'			AS "MSGID",
			'033'						AS "MSGNO",
			TO_DECIMAL("WAGE",15,2) 	AS "MSGV1",
			"CURRENCY" 					AS "MSGV2",
			''							AS "MSGV3",
			''							AS "MSGV4",
			'ATO_BAS_TOTL_PMT_FOR_WRK_AMT' AS "MSGV1_FC",
			'ATO_BAS_TOTL_PMT_FOR_WRK_AMT' AS "MSGV2_FC",
			'PERIOD_KEY'				AS "MSGV3_FC",
			''							AS "MSGV4_FC"
		FROM :lt_result_new
	;

END IF;

	ET_DATA = 
	SELECT 
		'lt_result_new' AS "SOURCE",
		"ABN",
		"WAGE"
	FROM :lt_result_new
	
;

END