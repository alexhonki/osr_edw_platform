PROCEDURE "osr.edw.platform.fra.prt.dt.abn.wages.ex::SP_ExistInQLDNexus"
(
	IN IT_DATA_FOR_RULE 	"osr.edw.platform.fra.prt.dt.abn::Types.wages.data_qld_nexus",
	IN PARAMETERS 			"osr.edw.platform.fra.prt.dt.abn::Types.wages.param_qld_nexus",
	OUT ET_RESULT 			"osr.edw.platform.fra.prt.dt.abn::Types.wages.result",
	OUT et_text             "osr.edw.platform.fra.prt.dt.abn::Types.wages.text"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   READS SQL DATA AS
BEGIN

		DECLARE lv_mode 				 NVARCHAR(1);  
		DECLARE lv_previous_year		 NVARCHAR(4);
		DECLARE lx_flag_qld_emp_cnt 	 NVARCHAR(1);
		DECLARE lx_flag_qld_emp_pc		 NVARCHAR(1);

		DECLARE lv_data_cnt INTEGER DEFAULT 0;
		


 SELECT COUNT(*)  INTO lv_data_cnt FROM :IT_DATA_FOR_RULE;

IF :lv_data_cnt > 0 THEN 
IF :lv_mode = 'R' THEN
	
	lt_param_r = 
			SELECT
			"RUN_MODE",
			"GJAHR_ADJUSTMENT",
			"FLAG_QLD_EMP_CNT",
			"FLAG_QLD_EMP_PC"
		FROM :PARAMETERS LIMIT 1;
		
	CALL "osr.edw.platform.fra.prt.dt.abn.wages.ex::SP_ExistInQLDNexus_R"
	( 
    	IT_DATA_FOR_RULE	=> :it_data_for_rule,
    	PARAMETERS      	=> :lt_param_r,
    	ET_RESULT   		=> ET_RESULT,
    	et_text         	=> et_text
	)
	;
END IF;

IF :lv_mode = 'S' THEN

	CALL "osr.edw.platform.fra.prt.dt.abn.wages.ex::SP_ExistInQLDNexus_S"
	( 
    	IT_DATA_FOR_RULE	=> :it_data_for_rule,
    	PARAMETERS      	=> :PARAMETERS,
    	ET_RESULT   		=> ET_RESULT,
    	et_text         	=> et_text
	)
	;
END IF;

END IF;

END