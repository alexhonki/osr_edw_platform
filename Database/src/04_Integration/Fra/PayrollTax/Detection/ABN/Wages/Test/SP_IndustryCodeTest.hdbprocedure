PROCEDURE "osr.edw.platform.fra.prt.dt.abn.wages.test::SP_IndustryCodeTest"
( 	IN iv_abn				         NVARCHAR(11) ,
	IN iv_gjahr				         NVARCHAR(4)  ,
	OUT lt_workset			"osr.edw.platform.fra.prt.dt.abn::Types.wages.ws",
	OUT et_data_for_rule	"osr.edw.platform.fra.prt.dt.abn::Types.wages.ws",
--	OUT lt_param			"osr.edw.platform.fra.prt.dt.abn::Types.wages.param_data_exclusions",
--	OUT IT_DATA_FOR_RULE	"osr.edw.platform.fra.prt.dt.abn::Types.wages.ws",
	OUT ET_RESULT 		    "osr.edw.platform.fra.prt.dt.abn::Types.wages.result",
	OUT et_text             "osr.edw.platform.fra.prt.dt.abn::Types.wages.text"

	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
   IF :iv_abn = '?' THEN 
   lt_workset =
		SELECT 
			"ABN",
			"PERIOD_CATEGORY",
			"PERIOD_KEY",
			"GJAHR"
		FROM
		"osr.edw.platform.fra.prt.dt.abn.wages::CV_ABN_WAGES_KEYS"
		;
   
   ELSE 
   lt_workset =
		SELECT 
			"ABN",
			"PERIOD_CATEGORY",
			"PERIOD_KEY",
			"GJAHR"
		FROM
		"osr.edw.platform.fra.prt.dt.abn.wages::CV_ABN_WAGES_KEYS"
		WHERE "ABN"     = :iv_abn
		AND   "GJAHR"   = :iv_gjahr 
		;
   
   END IF;
   
   
CALL "osr.edw.platform.fra.prt.dt.abn.wages.se::SP_SelectIRV"
(
:lt_workset,
et_data_for_rule
);



CALL  "osr.edw.platform.fra.prt.dt.abn.wages.ex::SP_IndustryCode"
(
:et_data_for_rule,
et_result, 
et_text

);


END ;