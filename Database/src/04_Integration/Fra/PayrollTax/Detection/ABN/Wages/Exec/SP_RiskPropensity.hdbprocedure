PROCEDURE "osr.edw.platform.fra.prt.dt.abn.wages.ex::SP_RiskPropensity"
	( 
    IN  it_data_for_rule 	"osr.edw.platform.fra.prt.dt.abn::Types.wages.data_wage",
    OUT et_result       	"osr.edw.platform.fra.prt.dt.abn::Types.wages.result",
    OUT et_text             "osr.edw.platform.fra.prt.dt.abn::Types.wages.text"
	)
	
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   READS SQL DATA AS
   
BEGIN

lt_alert_root = 
	SELECT  
		"ALERT_ROOT"."INVEST_OBJ_ID"							AS "ABN",
		"ALERT_ROOT"."INVEST_OBJ_ID2"							AS "GJAHR", 
		COUNT("ALERT_ROOT"."INVEST_OBJ_ID") 					AS "CNT_ABN"
	FROM "osr.apps.acs.synonym::SAPACS.FRA_D_ALERT_ROOT"		AS "ALERT_ROOT"
	WHERE "ALERT_ROOT"."LIFECYCLE_STATUS"	= '01'
	AND   "ALERT_ROOT"."INVEST_OBJ_TYPE"	= 'PT_ABN_FY'
	AND   "ALERT_ROOT"."REOPENED_IND" 		<> 'X'
	AND   "ALERT_ROOT"."INVEST_OBJ_ID" IN ( SELECT DISTINCT "DATA"."ABN" FROM :it_data_for_rule AS "DATA")
	GROUP BY 
		"ALERT_ROOT"."INVEST_OBJ_ID",
		"ALERT_ROOT"."INVEST_OBJ_ID2" 
	;
	
lt_rating = 
	SELECT DISTINCT * FROM 
	(SELECT
		"ABN",
		"PERIOD_CATEGORY", 
		"PERIOD_KEY",
		"GJAHR",
		"DETECTION_RESULT",
		RANK() OVER(PARTITION BY "ABN", "PERIOD_CATEGORY", "PERIOD_KEY" ORDER BY "ABN", "DETECTION_RESULT" DESC) AS "DETECTION_RESULT_RANK"
	FROM
	(
		SELECT
			"DATA"."ABN"										   AS "ABN",
			"DATA"."PERIOD_CATEGORY"							   AS "PERIOD_CATEGORY",
			"DATA"."PERIOD_KEY" 								   AS "PERIOD_KEY",
			"DATA"."GJAHR"										   AS "GJAHR",
			CASE WHEN (
					(SELECT SUM("CNT_ABN") FROM :lt_alert_root WHERE "ABN" = "ALERT_ROOT"."ABN" AND "GJAHR" < "ALERT_ROOT"."GJAHR" ) <> 1 )  
						AND ("DATA"."GJAHR" > "ALERT_ROOT"."GJAHR")  THEN	100*5/5 ELSE -- previous years, more than one found
			CASE WHEN ("ALERT_ROOT"."CNT_ABN"   =  1 )  AND ("DATA"."GJAHR" = "ALERT_ROOT"."GJAHR")	 THEN	100*2/5 ELSE --1 in the same year
			CASE WHEN ("ALERT_ROOT"."CNT_ABN"   = 1 )   AND ("DATA"."GJAHR" > "ALERT_ROOT"."GJAHR")  THEN	100*3/5 ELSE 
			CASE WHEN ("ALERT_ROOT"."CNT_ABN"   <> 1 )  AND ("DATA"."GJAHR" = "ALERT_ROOT"."GJAHR")	 THEN	100*4/5 ELSE 0 
			END END END END AS "DETECTION_RESULT"
		FROM :it_data_for_rule					AS "DATA"
		INNER JOIN :lt_alert_root               AS "ALERT_ROOT"
			ON  "DATA"."ABN"					= "ALERT_ROOT"."ABN"
	)
	)
	WHERE "DETECTION_RESULT_RANK" = 1
	;

et_result = 
	SELECT
		"ABN",
		"PERIOD_CATEGORY",
		"PERIOD_KEY",
		"GJAHR",
		"DETECTION_RESULT"
	FROM :lt_rating
	;
	
	
et_text = 
	SELECT 
		"RATING"."ABN",
		"RATING"."PERIOD_CATEGORY",
		"RATING"."PERIOD_KEY",
		"RATING"."GJAHR",
		''					AS "TEXT",
		'/OSRQLD/FRA_PRT'	AS "MSGID",
		--'018'				AS "MSGNO",
		'028'				AS "MSGNO",
		--"RATING"."GJAHR" 	AS "MSGV1",
		CASE 
			WHEN ("DETECTION_RESULT" = 100 OR "DETECTION_RESULT" = 60)
				THEN (	SELECT SUM("CNT_ABN")
						FROM :lt_alert_root AS "ALERT_ROOT" 
						WHERE "ALERT_ROOT"."ABN" = "RATING"."ABN"
							AND  "ALERT_ROOT"."GJAHR" < "RATING"."GJAHR"  )
					ELSE 
					CASE 
						WHEN ("DETECTION_RESULT" = 80 OR "DETECTION_RESULT" = 40) 
							THEN (	SELECT SUM("CNT_ABN")
									FROM :lt_alert_root AS "ALERT_ROOT" 
									WHERE "ALERT_ROOT"."ABN" = "RATING"."ABN"
										AND  "ALERT_ROOT"."GJAHR" = "RATING"."GJAHR"  )
							ELSE 0
					END
		END AS "MSGV1",		
		
		
		CASE 
			WHEN ("DETECTION_RESULT" = 100 OR "DETECTION_RESULT" = 60)
				THEN 'previous' 
					ELSE 
					CASE 
						WHEN ("DETECTION_RESULT" = 80 OR "DETECTION_RESULT" = 40) 
							THEN 'same'
								ELSE 'previous or same'
					END
		END AS "MSGV2",
		TO_INTEGER("DETECTION_RESULT"/20) AS "MSGV3",
		''					AS "MSGV4",
		''					AS "MSGV1_FC",
		''					AS "MSGV2_FC",
		''					AS "MSGV3_FC",
		''					AS "MSGV4_FC"
	FROM  :lt_rating as "RATING"
	;
END	