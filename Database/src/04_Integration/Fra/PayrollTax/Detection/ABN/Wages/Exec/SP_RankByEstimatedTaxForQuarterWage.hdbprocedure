PROCEDURE "osr.edw.platform.fra.prt.dt.abn.wages.ex::SP_RankByEstimatedTaxForQuarterWage"( 
    IN  it_data_for_rule 	"osr.edw.platform.fra.prt.dt.abn::Types.wages.data_wage",
    IN 	parameters          "osr.edw.platform.fra.prt.dt.abn::Types.wages.param_rank_estimated_tax",
    OUT et_result       	"osr.edw.platform.fra.prt.dt.abn::Types.wages.result",
    OUT et_text             "osr.edw.platform.fra.prt.dt.abn::Types.wages.text"
	
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   READS SQL DATA AS
BEGIN

DECLARE lv_mode NVARCHAR(1);  
DECLARE lv_thld_yearly Decimal(15,2) ;
DECLARE lv_max_rating Decimal(3,2);
DECLARE lv_rfr_max_low Decimal(15,2);

SELECT 
"RUN_MODE",
"THRESHOLD_YEARLY"
INTO 
lv_mode,
lv_thld_yearly
FROM :PARAMETERS LIMIT 1;

--estimated annual wages when the quarter wage is above the threshold hold
lt_wages = 
SELECT 
"WAGES"."ABN" AS "ABN",
"WAGES"."PERIOD_CATEGORY" AS "PERIOD_CATEGORY",
"WAGES"."PERIOD_KEY" AS "PERIOD_KEY",
"WAGES"."GJAHR" AS "GJAHR",
"WAGES"."WAERS" AS "WAERS",
CASE 
WHEN RIGHT("WAGES"."PERIOD_KEY",2) = 'Q1'
THEN SUM("WAGES"."ATO_BAS_TOTL_PMT_FOR_WRK_AMT")*4
WHEN RIGHT("WAGES"."PERIOD_KEY",2) = 'Q2'
THEN SUM("WAGES"."ATO_BAS_TOTL_PMT_FOR_WRK_AMT")/2*4
WHEN RIGHT("WAGES"."PERIOD_KEY",2) = 'Q3'
THEN SUM("WAGES"."ATO_BAS_TOTL_PMT_FOR_WRK_AMT")/3*4
END 
AS "WAGE",
SUM("WAGES"."ATO_BAS_TOTL_PMT_FOR_WRK_AMT") AS "QTR_WAGE"
FROM "osr.edw.platform.fra.prt.dt.abn.wages::CV_ABN_ATO_BAS_WAGES" AS "WAGES"
WHERE "PERIOD_CATEGORY" = 'PT-Q'
  AND EXISTS (
	SELECT * FROM :it_data_for_rule AS "KEYS"
	WHERE "KEYS"."ABN" = "WAGES"."ABN"
	  AND "KEYS"."PERIOD_CATEGORY" = "WAGES"."PERIOD_CATEGORY"
	  AND "KEYS"."PERIOD_KEY" = "WAGES"."PERIOD_KEY"
	  AND "KEYS"."GJAHR" = "WAGES"."GJAHR"
  )
GROUP BY 
"WAGES"."ABN",
"WAGES"."PERIOD_CATEGORY",
"WAGES"."PERIOD_KEY",
"WAGES"."GJAHR",
"WAGES"."WAERS"
HAVING SUM("WAGES"."ATO_BAS_TOTL_PMT_FOR_WRK_AMT")  >= :lv_thld_yearly
;

-- use the WCQ wages from previous year as the predicted wage for the current year
/*
lt_wcq_predict = 
SELECT 
"ABN",
"PERIOD_CATEGORY",
"PERIOD_KEY",
"GJAHR",
"WAERS",
SUM("WCQ_ACT_WAGES") AS "WCQ_ACT_WAGES"
FROM (
SELECT 
"WAGES"."ABN" AS "ABN",
"WAGES"."PERIOD_CATEGORY" AS "PERIOD_CATEGORY",
TO_NVARCHAR(TO_INT("WAGES"."PERIOD_KEY") + 1) AS "PERIOD_KEY",
TO_NVARCHAR(TO_INT("WAGES"."GJAHR") + 1) AS "GJAHR",
"WAGES"."WCQ_ACT_WAGES" AS "WCQ_ACT_WAGES",
"WAGES"."WAERS" AS "WAERS"
FROM "osr.edw.platform.fra.prt.dt.abn.wages::CV_ABN_WCQ_WAGES" AS "WAGES"
WHERE "PERIOD_CATEGORY" = 'PT-A'
  AND EXISTS (
	SELECT * FROM :it_data_for_rule AS "KEYS"
	WHERE "KEYS"."ABN" = "WAGES"."ABN"
	  AND "KEYS"."GJAHR" = TO_NVARCHAR(TO_INT("WAGES"."GJAHR") + 1)
  )
)
GROUP BY 
"ABN",
"PERIOD_CATEGORY",
"PERIOD_KEY",
"GJAHR",
"WAERS"
;
*/
lt_wcq_predict = 
SELECT 
"KEYS"."ABN" AS "ABN",
"KEYS"."GJAHR" AS "GJAHR",
"KEYS"."PERIOD_CATEGORY" AS "PERIOD_CATEGORY",
"KEYS"."PERIOD_KEY" AS "PERIOD_KEY",
"WAGES"."WAERS" AS "WAERS",
SUM("WAGES"."WCQ_ACT_WAGES") AS "WCQ_ACT_WAGES"
FROM "osr.edw.platform.fra.prt.dt.abn.wages::CV_ABN_WCQ_WAGES" AS "WAGES"
INNER JOIN :lt_wages AS "KEYS"
ON  "KEYS"."ABN" = "WAGES"."ABN"
AND "KEYS"."GJAHR" = TO_NVARCHAR(TO_INT("WAGES"."GJAHR") + 1)
WHERE "WAGES"."PERIOD_CATEGORY" = 'PT-A'
GROUP BY 
"KEYS"."ABN",
"KEYS"."PERIOD_CATEGORY",
"KEYS"."PERIOD_KEY",
"KEYS"."GJAHR",
"WAGES"."WAERS"
;

lt_wage_for_tax = 
SELECT 
"ABN",
"PERIOD_CATEGORY",
"PERIOD_KEY",
"GJAHR",
"WAERS",
SUM("WAGE") AS "WAGE",
SUM("WCQ_ACT_WAGES") AS "WCQ_ACT_WAGES"
FROM 
(
	SELECT 
	"ABN",
	"PERIOD_CATEGORY",
	"PERIOD_KEY",
	"GJAHR",
	"WAERS",
	"WAGE", 
	0 AS "WCQ_ACT_WAGES"
	FROM :lt_wages
	UNION
	SELECT 
	"ABN",
	"PERIOD_CATEGORY",
	"PERIOD_KEY",
	"GJAHR",
	"WAERS",
	0 AS "WAGE", 
	"WCQ_ACT_WAGES" AS "WCQ_ACT_WAGES"
	FROM :lt_wcq_predict
)
GROUP BY 
"ABN",
"PERIOD_CATEGORY",
"PERIOD_KEY",
"GJAHR",
"WAERS"
;
 	
lt_estimated_tax = 
SELECT 
"W"."ABN",
"W"."PERIOD_CATEGORY",
"W"."PERIOD_KEY",
"W"."GJAHR",
100 AS "DETECTION_RESULT",
"W"."WAGE" as "WAGE",
/* 
CASE 
WHEN "W"."WAGE" > "THLD"."DEDUCTION_TO" 
THEN "W"."WCQ_ACT_WAGES" * ("RATE"."PRT_YRLY_RATE"/100)
ELSE CASE
	WHEN "W"."WAGE" >= "THLD"."THRESHOLD" 
	THEN (("W"."WCQ_ACT_WAGES" - ("W"."WCQ_ACT_WAGES"/"W"."WAGE") * ("THLD"."THRESHOLD" - (("W"."WAGE" - "THLD"."THRESHOLD")/4))) * ("RATE"."PRT_YRLY_RATE"/100))
	ELSE 0
END
END 
AS "RISK_AMOUNT",
*/
-- BEGIN INSERT NEW LOGIC FOR NEW TAX THRESHOLD 09/01/2020
CASE WHEN ( "W"."WAGE" >= "THLD"."DEDUCTION_TO") THEN ("W"."WCQ_ACT_WAGES"*("RATE"."PRT_HYRLY_RATE"/100)) -- Higher rate (PRT_HYRLY_RATE) for over deduction threshold 
	ELSE 
		CASE WHEN ( "W"."WAGE" <= "THLD"."THRESHOLD" ) THEN 0 --no PRT liability
			ELSE 
				CASE WHEN ("W"."WAGE" > "THLD"."THRESHOLD"  AND "W"."WAGE" < "THLD"."DEDUCTION_TO") -- PRT Liable but under deduction threshold so use lower rate (PRT_YRLY_RATE)
					THEN (( "W"."WCQ_ACT_WAGES" - ("W"."WCQ_ACT_WAGES"/"W"."WAGE")*("THLD"."THRESHOLD"-(("W"."WAGE"-"THLD"."THRESHOLD")/4)))*("RATE"."PRT_YRLY_RATE"/100)) --lower rate 
						ELSE 0
				END
		END
END AS "RISK_AMOUNT",
-- END INSERT NEW LOGIC FOR NEW TAX THRESHOLD 09/01/2020

"W"."WAERS" AS "CURRENCY"
FROM
:lt_wage_for_tax AS "W"
INNER JOIN 
"osr.edw.staging.md.rms.prt.proxy::CV_PRT_THRESHOLD" AS "THLD"
ON "W"."GJAHR" = "THLD"."GJAHR"
INNER JOIN
"osr.edw.staging.md.rms.prt.proxy::CV_PRT_RATE" AS "RATE"
ON  "W"."GJAHR" = "RATE"."GJAHR"
AND "W"."PERIOD_KEY" = "RATE"."PERIOD_KEY"
WHERE "THLD"."INCOTYP" = 'PT-A' --estimated tax based on the annual threshold
;

SELECT MAX("RISK_FACTOR_RATING") INTO lv_max_rating FROM "osr.edw.platform.fra.prt.dt.abn.wages.dt::CV_RFR_ESTIMATED_TAX";

SELECT "LOW" INTO lv_rfr_max_low 
FROM "osr.edw.platform.fra.prt.dt.abn.wages.dt::CV_RFR_ESTIMATED_TAX" 
WHERE "TOP_BAND" = 'X';


lt_pre_result = 
SELECT
"W"."ABN",
"W"."PERIOD_CATEGORY",
"W"."PERIOD_KEY",
"W"."GJAHR",
:lv_max_rating AS "RISK_FACTOR_RATING",
"W"."RISK_AMOUNT" AS "RISK_AMOUNT",
"W"."CURRENCY" AS "CURRENCY"
FROM
:lt_estimated_tax AS "W"
WHERE "W"."RISK_AMOUNT" >= :lv_rfr_max_low
UNION
SELECT
"W"."ABN",
"W"."PERIOD_CATEGORY",
"W"."PERIOD_KEY",
"W"."GJAHR",
"R"."RISK_FACTOR_RATING" AS "RISK_FACTOR_RATING",
"W"."RISK_AMOUNT" AS "RISK_AMOUNT",
"W"."CURRENCY" AS "CURRENCY"
FROM 
:lt_estimated_tax AS "W", 
"osr.edw.platform.fra.prt.dt.abn.wages.dt::CV_RFR_ESTIMATED_TAX" AS "R"
WHERE "W"."RISK_AMOUNT" >= "R"."LOW" 
  AND "W"."RISK_AMOUNT" < "R"."HIGH" 
  AND "R"."TOP_BAND" <> 'X'
;

IF :lv_mode = 'R' THEN

et_result = 
SELECT
"ABN",
"PERIOD_CATEGORY",
"PERIOD_KEY",
"GJAHR",
100*"RISK_FACTOR_RATING"/:lv_max_rating AS "DETECTION_RESULT"
FROM
:lt_pre_result
;

et_text = 
SELECT 
"ABN",
"PERIOD_CATEGORY",
"PERIOD_KEY",
"GJAHR",
'' AS "TEXT",
'/OSRQLD/FRA_PRT' AS "MSGID",
--'017' AS "MSGNO",
'027' AS "MSGNO",
TO_DECIMAL("RISK_AMOUNT",15,2)  AS "MSGV1",
"CURRENCY" AS "MSGV2",
"RISK_FACTOR_RATING" AS "MSGV3",
'' AS "MSGV4",
'' AS "MSGV1_FC",
'WAERS' AS "MSGV2_FC",
'' AS "MSGV3_FC",
'' AS "MSGV4_FC"
FROM 
:lt_pre_result
;

END IF;

IF :lv_mode = 'S' THEN

et_result = 
SELECT
"ABN",
"PERIOD_CATEGORY",
"PERIOD_KEY",
"GJAHR",
100*"RISK_FACTOR_RATING"/:lv_max_rating AS "DETECTION_RESULT"
FROM
:lt_pre_result
;

et_text = 
SELECT 
"ABN",
"PERIOD_CATEGORY",
"PERIOD_KEY",
"GJAHR",
'' AS "TEXT",
'/OSRQLD/FRA_PRT' AS "MSGID",
--'017' AS "MSGNO",
'026' AS "MSGNO",
TO_DECIMAL("RISK_AMOUNT",15,2) AS "MSGV1",
"CURRENCY" AS "MSGV2",
"RISK_FACTOR_RATING" AS "MSGV3",
'' AS "MSGV4",
'' AS "MSGV1_FC",
'WAERS' AS "MSGV2_FC",
'' AS "MSGV3_FC",
'' AS "MSGV4_FC"
FROM 
:lt_pre_result
;
END IF;


END