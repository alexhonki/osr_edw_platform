FUNCTION "osr.edw.platform.fra.prt.dt.abn.ui::TF_TAXAGENT_DETAILS"(IN IP_ALERT_ID NVARCHAR(20))
             RETURNS TABLE
		(
			DB_KEY                  		VARBINARY(16),
			DB_KEY_DASH						NVARCHAR(36),
			ALERT_ID                		NVARCHAR(20),
			ABN                     		NVARCHAR(20),
			GJAHR                   		NVARCHAR(4),
		    BAS_QTR                         NVARCHAR(4),
	        FINANCIAL_YEAR                  NVARCHAR(4),
			TA_NUM							NVARCHAR(20),
  			TA_STATUS						NVARCHAR(1),
			TA_NM							NVARCHAR(200),
			TA_PSTL_ADDRESS_LN_1			NVARCHAR(40),
			TA_PSTL_ADDRESS_LN_2			NVARCHAR(40),
			TA_PSTL_SUBURB					NVARCHAR(30),
			TA_PSTL_STATE					NVARCHAR(20),
			TA_PSTL_POSTCODE				NVARCHAR(4),
			TA_PHONE_NUM					NVARCHAR(15),
			MOBILE_NUM						NVARCHAR(15),
			FAX_NUM							NVARCHAR(15),
			EMAIL_ADDR						NVARCHAR(80)
			
	)


       LANGUAGE SQLSCRIPT 
       SQL SECURITY INVOKER AS 
BEGIN 


IF :IP_ALERT_ID IS NULL OR :IP_ALERT_ID = '?' OR :IP_ALERT_ID = 'NULL' OR :IP_ALERT_ID = '' THEN

ALERT_INFO =
                SELECT
                    "DB_KEY",
                    "DB_KEY_DASH",
                    "ALERT_ID",
                    "ABN" ,
                    "GJAHR"
                FROM "osr.edw.platform.fra.prt.dt.abn::TF_ALERT_PT_ABN_FY"()
;

ELSE

ALERT_INFO =
                SELECT
                    "DB_KEY",
                    "DB_KEY_DASH",
                    "ALERT_ID",
                    "ABN" ,
                    "GJAHR"
                FROM  "osr.edw.platform.fra.prt.dt.abn::TF_ALERT_PT_ABN_FY"()
                WHERE "ALERT_ID" = :IP_ALERT_ID
;

END IF;
--Get the BAS data for all the alerts
GET_BAS_QTR = 
SELECT * FROM (
SELECT 
	"BAS"."ABN", 
	"BAS"."CAC_NUM", 
	"BAS"."FINANCIAL_YEAR",
	"BAS"."BAS_QTR",
	"BAS"."TA_NUM",
	RANK() OVER (PARTITION BY "BAS"."ABN","BAS"."FINANCIAL_YEAR", "BAS"."BAS_QTR" ORDER BY "BAS"."ABN","BAS"."FINANCIAL_YEAR", "BAS"."BAS_QTR", "BAS"."CAC_NUM" ASC) AS"RANK"
FROM "osr.edw.staging.td.ato.proxy::TF_BASNIND_C"() AS "BAS"
WHERE EXISTS
(
SELECT * FROM :ALERT_INFO AS "ALERT"
    	WHERE  "BAS"."ABN"			  = "ALERT"."ABN"	
    	AND    "BAS"."FINANCIAL_YEAR" >= "ALERT"."GJAHR"
)
AND 			"TA_NUM" >=1
)WHERE "RANK" = '1'
ORDER BY "ABN","FINANCIAL_YEAR" DESC, RIGHT("BAS_QTR",1) DESC,"CAC_NUM" ASC
;

GET_ALERT_DET = 
SELECT * FROM
(
SELECT         
		"DB_KEY",
        "DB_KEY_DASH",
        "ALERT_ID",
        "ABN" ,
        "GJAHR",
        "ITEM_NUM",
		"DETECT_OBJ_TYPE",
		"DETECT_OBJ_ID",
		"DETECT_OBJ_ID2",
		"DETECT_OBJ_ID3",
		"BAS_QTR",
		RANK() OVER (PARTITION BY "ALERT_ID" ORDER BY "ALERT_ID", "ITEM_NUM" DESC) AS "RANK_1"
FROM
(
SELECT
        "A"."DB_KEY",
        "A"."DB_KEY_DASH",
        "A"."ALERT_ID",
        "A"."ABN" ,
        "A"."GJAHR",
        "C"."ITEM_NUM",
		"C"."DETECT_OBJ_TYPE",
		"C"."DETECT_OBJ_ID",
		"C"."DETECT_OBJ_ID2",
		"C"."DETECT_OBJ_ID3",
		CASE WHEN "C"."DETECT_OBJ_ID2" = 'PT-Q' AND RIGHT("C"."DETECT_OBJ_ID3",2) IN ('Q1','Q2','Q3') THEN RIGHT("C"."DETECT_OBJ_ID3",2) ELSE 
		CASE WHEN "C"."DETECT_OBJ_ID2" = 'PT-Q' AND RIGHT("C"."DETECT_OBJ_ID3",2) IN ('Q4') THEN 'FY' ELSE
		CASE WHEN "C"."DETECT_OBJ_ID2" = 'PT-A' THEN 'FY' ELSE '' END END END AS "BAS_QTR"
FROM
	:ALERT_INFO AS "A"
INNER JOIN
	"osr.apps.acs.synonym::SAPACS.FRA_D_ALERT_ITEM" AS "C"
ON
	"A"."DB_KEY" = "C"."PARENT_KEY"
WHERE
    "C"."DETECT_OBJ_TYPE" = 'PT_ABN_WGE'
)
) WHERE  "RANK_1" = '1'
;        

------ Get Agent for the Annuals--------
GET_AGENT_FY =
SELECT * FROM
(
SELECT         
		"A"."DB_KEY",
        "A"."DB_KEY_DASH",
        "A"."ALERT_ID",
        "A"."ABN" ,
        "A"."GJAHR",
        "A"."BAS_QTR",
        "B"."TA_NUM",
        "B"."FINANCIAL_YEAR",
        RANK() OVER (PARTITION BY 	"A"."ALERT_ID", "A"."ABN" ORDER BY 	"A"."ALERT_ID", "A"."ABN" , "B"."FINANCIAL_YEAR" DESC,RIGHT("B"."BAS_QTR",1) DESC) AS "RANK_1"
FROM
(SELECT * FROM	:GET_ALERT_DET WHERE "BAS_QTR" = 'FY')AS "A"
INNER JOIN
	:GET_BAS_QTR AS "B"
ON
	"B"."ABN" = "A"."ABN"
AND CONCAT("B"."FINANCIAL_YEAR",RIGHT("B"."BAS_QTR",1)) >= CONCAT("A"."GJAHR" ,RIGHT("A"."BAS_QTR",1))
WHERE TO_NVARCHAR("B"."TA_NUM") <> '0'
)
WHERE "RANK_1" = '1'
;


--------Get Agent for Qtrs-----------
GET_AGENT_QTR =
SELECT * FROM
(
SELECT         
		"A"."DB_KEY",
        "A"."DB_KEY_DASH",
        "A"."ALERT_ID",
        "A"."ABN" ,
        "A"."GJAHR",
        "A"."BAS_QTR",
        "B"."TA_NUM",
        "B"."FINANCIAL_YEAR",
	    RANK() OVER (PARTITION BY "A"."ALERT_ID","A"."ABN" ORDER BY "A"."ALERT_ID","A"."ABN", "B"."FINANCIAL_YEAR" DESC,"B"."BAS_QTR" DESC) AS "RANK_1"

FROM
(SELECT * FROM	:GET_ALERT_DET WHERE "BAS_QTR" IN ('Q1','Q2','Q3'))AS "A"
INNER JOIN
	:GET_BAS_QTR AS "B"
ON
	"A"."ABN"     = "B"."ABN"
AND "A"."GJAHR"   = "B"."FINANCIAL_YEAR"
AND RIGHT("A"."BAS_QTR",1) >= RIGHT("B"."BAS_QTR",1)
WHERE TO_NVARCHAR("B"."TA_NUM") <> '0'
AND "B"."BAS_QTR" <> 'FY'
) WHERE "RANK_1" = '1'

;

----If the agent is not there for that qtr then get the agent from the preceding BAS FY  -------------
GET_AGENT_QTR_1 =
SELECT         
		"A"."DB_KEY",
        "A"."DB_KEY_DASH",
        "A"."ALERT_ID",
        "A"."ABN" ,
        "A"."GJAHR",
        "A"."BAS_QTR",
        "B"."TA_NUM",
        "B"."FINANCIAL_YEAR"
FROM
	(
		SELECT * FROM	:GET_ALERT_DET WHERE "BAS_QTR" IN ('Q1','Q2','Q3') AND "ALERT_ID" NOT IN (SELECT DISTINCT "ALERT_ID" FROM	:GET_AGENT_QTR) 
	)		AS "A"
INNER JOIN
	"osr.edw.staging.td.ato.proxy::TF_BASNIND_C"() AS "B"
ON
	"A"."ABN"     = "B"."ABN"
AND TO_NVARCHAR(TO_INT("A"."GJAHR") - 1)   = "B"."FINANCIAL_YEAR"
WHERE TO_NVARCHAR("B"."TA_NUM") <> '0'
AND "B"."BAS_QTR" = 'FY'

;


GET_TA_FOR_ABN =
SELECT DISTINCT 
		"DB_KEY",
        "DB_KEY_DASH",
        "ALERT_ID",
        "ABN" ,
        "GJAHR",
        "BAS_QTR",
        "TA_NUM",
        "FINANCIAL_YEAR"

FROM
(
SELECT         
		"DB_KEY",
        "DB_KEY_DASH",
        "ALERT_ID",
        "ABN" ,
        "GJAHR",
        "BAS_QTR",
        "TA_NUM",
        "FINANCIAL_YEAR"
  FROM 
  :GET_AGENT_FY 
UNION
SELECT         
		"DB_KEY",
        "DB_KEY_DASH",
        "ALERT_ID",
        "ABN" ,
        "GJAHR",
        "BAS_QTR",
        "TA_NUM",
        "FINANCIAL_YEAR"
  FROM 
	:GET_AGENT_QTR
  WHERE 		"TA_NUM" IS NOT NULL
			OR	TO_NVARCHAR("TA_NUM") <> '0'
			OR	TO_NVARCHAR("TA_NUM") <> ''
UNION  
SELECT         
		"DB_KEY",
        "DB_KEY_DASH",
        "ALERT_ID",
        "ABN" ,
        "GJAHR",
        "BAS_QTR",
        "TA_NUM",
        "FINANCIAL_YEAR"
  FROM 
  :GET_AGENT_QTR_1 

) 

ORDER BY "ABN"
;



RETURN
		SELECT DISTINCT
           	"DB_KEY",
            "DB_KEY_DASH",
            "ALERT_ID",
            "ABN",
            "GJAHR",
	        "BAS_QTR",
	        "FINANCIAL_YEAR",
            "TA_NUM",
            "TA_STATUS",
            "TA_NM",
          	"TA_PSTL_ADDRESS_LN_1",
			"TA_PSTL_ADDRESS_LN_2",
			"TA_PSTL_SUBURB",
			"TA_PSTL_STATE",
			"TA_PSTL_POSTCODE",
			"TA_PHONE_NUM",
			"MOBILE_NUM",
			"FAX_NUM",
			"EMAIL_ADDR"
		FROM
		(                              
			SELECT
		    "ALERT"."DB_KEY",
    	    "ALERT"."DB_KEY_DASH",
    	    "ALERT"."ALERT_ID",
    	    "ALERT"."ABN" ,
    	    "ALERT"."GJAHR",
    	    "ALERT"."FINANCIAL_YEAR",
    	    "ALERT"."BAS_QTR",
    	    "ALERT"."TA_NUM",

			"B"."TA_STATUS",
			"B"."TA_NM",
			"B"."TA_PSTL_ADDRESS_LN_1",
			"B"."TA_PSTL_ADDRESS_LN_2",
			"B"."TA_PSTL_SUBURB",
			"B"."TA_PSTL_STATE",
			"B"."TA_PSTL_POSTCODE",
			"B"."TA_PHONE_NUM",
			"B"."MOBILE_NUM",
			"B"."FAX_NUM",
			"B"."EMAIL_ADDR"
	FROM

	:GET_TA_FOR_ABN  AS "ALERT"
	INNER JOIN
		"osr.edw.staging.md.ato.synonym::CDS_TAG.DSO.TAXAGENT.active_data" AS "B"
	 ON 	
		"ALERT"."TA_NUM" = "B"."TA_NUM"
		
	) WHERE "TA_STATUS" = 'A'
				;

END; 